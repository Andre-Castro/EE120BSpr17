
acast050_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800140  00800140  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f59  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000997  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065c  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000024ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d3  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000315b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	41 d1       	rcall	.+642    	; 0x346 <main>
  c4:	70 c1       	rjmp	.+736    	; 0x3a6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
		case maintainD:
			break;
		case maintainU:
			break;
		default:
			LCD_DisplayString(1, strings[0]);
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	41 98       	cbi	0x08, 1	; 8
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	40 9a       	sbi	0x08, 0	; 8
  f4:	00 00       	nop
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	8b b9       	out	0x0b, r24	; 11
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	00 00       	nop
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 1ac:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_avr_timer_cntcurr>
 1d6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 1ec:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <TimerFlag>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 21a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 222:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 248:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <_avr_timer_cntcurr>
 24c:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <_avr_timer_cntcurr+0x1>
 250:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr+0x2>
 254:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <ADC_init>:
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <irLoop>:
			break;
	}
}

enum IR_STATES{IR_init, countHigh, countLow, update};
void irLoop(unsigned short x, unsigned short y){
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	a4 e6       	ldi	r26, 0x64	; 100
	unsigned short highPulse = 0;
	unsigned short lowPulse = 0;
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
	}
}

enum IR_STATES{IR_init, countHigh, countLow, update};
void irLoop(unsigned short x, unsigned short y){
	unsigned short highPulse = 0;
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
	unsigned short lowPulse = 0;
	static unsigned char currentPulse = 0;
	unsigned char i = 0;
	for(i = 0; i < 100; i ++){
		if(x != ADC){ //if a change from the orriginal ADC signal is detected
 27a:	e8 e7       	ldi	r30, 0x78	; 120
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	40 81       	ld	r20, Z
 280:	51 81       	ldd	r21, Z+1	; 0x01
 282:	48 17       	cp	r20, r24
 284:	59 07       	cpc	r21, r25
 286:	71 f1       	breq	.+92     	; 0x2e4 <irLoop+0x7e>
			y = ADC; //set y to the current ADC signal (hopefully still different from x)
 288:	40 81       	ld	r20, Z
 28a:	51 81       	ldd	r21, Z+1	; 0x01
			while(x != y){ // while that signal still differs (it is high)
 28c:	84 17       	cp	r24, r20
 28e:	95 07       	cpc	r25, r21
 290:	61 f1       	breq	.+88     	; 0x2ea <irLoop+0x84>
				y = ADC;
 292:	40 81       	ld	r20, Z
 294:	51 81       	ldd	r21, Z+1	; 0x01
				highPulse++; // count how many iterations it is high for
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
				if(highPulse >= MAX_VAL){
 29a:	28 3e       	cpi	r18, 0xE8	; 232
 29c:	1d ef       	ldi	r17, 0xFD	; 253
 29e:	31 07       	cpc	r19, r17
 2a0:	b8 f5       	brcc	.+110    	; 0x310 <irLoop+0xaa>
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <irLoop+0x4e>
	unsigned char i = 0;
	for(i = 0; i < 100; i ++){
		if(x != ADC){ //if a change from the orriginal ADC signal is detected
			y = ADC; //set y to the current ADC signal (hopefully still different from x)
			while(x != y){ // while that signal still differs (it is high)
				y = ADC;
 2a4:	40 81       	ld	r20, Z
 2a6:	51 81       	ldd	r21, Z+1	; 0x01
				highPulse++; // count how many iterations it is high for
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
				if(highPulse >= MAX_VAL){
 2ac:	28 3e       	cpi	r18, 0xE8	; 232
 2ae:	bd ef       	ldi	r27, 0xFD	; 253
 2b0:	3b 07       	cpc	r19, r27
 2b2:	71 f1       	breq	.+92     	; 0x310 <irLoop+0xaa>
	static unsigned char currentPulse = 0;
	unsigned char i = 0;
	for(i = 0; i < 100; i ++){
		if(x != ADC){ //if a change from the orriginal ADC signal is detected
			y = ADC; //set y to the current ADC signal (hopefully still different from x)
			while(x != y){ // while that signal still differs (it is high)
 2b4:	84 17       	cp	r24, r20
 2b6:	95 07       	cpc	r25, r21
 2b8:	a9 f7       	brne	.-22     	; 0x2a4 <irLoop+0x3e>
 2ba:	17 c0       	rjmp	.+46     	; 0x2ea <irLoop+0x84>
					return 0;
				}
			}
			pulses[currentPulse][0] = highPulse;
			while(x == y){ // the signal has gone back to being low (or how it was orriginally before button press)
				lowPulse++; // count how many iteratinos it is low for
 2bc:	6f 5f       	subi	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
				y = ADC;
 2c0:	40 81       	ld	r20, Z
 2c2:	51 81       	ldd	r21, Z+1	; 0x01
				if(lowPulse >= MAX_VAL){
 2c4:	68 3e       	cpi	r22, 0xE8	; 232
 2c6:	cd ef       	ldi	r28, 0xFD	; 253
 2c8:	7c 07       	cpc	r23, r28
 2ca:	11 f1       	breq	.+68     	; 0x310 <irLoop+0xaa>
				if(highPulse >= MAX_VAL){
					return 0;
				}
			}
			pulses[currentPulse][0] = highPulse;
			while(x == y){ // the signal has gone back to being low (or how it was orriginally before button press)
 2cc:	84 17       	cp	r24, r20
 2ce:	95 07       	cpc	r25, r21
 2d0:	a9 f3       	breq	.-22     	; 0x2bc <irLoop+0x56>
				if(lowPulse >= MAX_VAL){
					return 0;
				}
				//PORTB = lowPulse & 0xFF;
			}
			pulses[currentPulse][1] = lowPulse;
 2d2:	e7 01       	movw	r28, r14
 2d4:	cc 0f       	add	r28, r28
 2d6:	dd 1f       	adc	r29, r29
 2d8:	c4 5a       	subi	r28, 0xA4	; 164
 2da:	de 4f       	sbci	r29, 0xFE	; 254
 2dc:	69 83       	std	Y+1, r22	; 0x01
			currentPulse++;
 2de:	bf 5f       	subi	r27, 0xFF	; 255
 2e0:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <__data_end>
 2e4:	a1 50       	subi	r26, 0x01	; 1
void irLoop(unsigned short x, unsigned short y){
	unsigned short highPulse = 0;
	unsigned short lowPulse = 0;
	static unsigned char currentPulse = 0;
	unsigned char i = 0;
	for(i = 0; i < 100; i ++){
 2e6:	59 f6       	brne	.-106    	; 0x27e <irLoop+0x18>
 2e8:	13 c0       	rjmp	.+38     	; 0x310 <irLoop+0xaa>
				highPulse++; // count how many iterations it is high for
				if(highPulse >= MAX_VAL){
					return 0;
				}
			}
			pulses[currentPulse][0] = highPulse;
 2ea:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <__data_end>
 2ee:	eb 2e       	mov	r14, r27
 2f0:	f1 2c       	mov	r15, r1
 2f2:	a7 01       	movw	r20, r14
 2f4:	44 0f       	add	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	44 5a       	subi	r20, 0xA4	; 164
 2fa:	5e 4f       	sbci	r21, 0xFE	; 254
 2fc:	ea 01       	movw	r28, r20
 2fe:	28 83       	st	Y, r18
			while(x == y){ // the signal has gone back to being low (or how it was orriginally before button press)
				lowPulse++; // count how many iteratinos it is low for
 300:	6f 5f       	subi	r22, 0xFF	; 255
 302:	7f 4f       	sbci	r23, 0xFF	; 255
				y = ADC;
 304:	40 81       	ld	r20, Z
 306:	51 81       	ldd	r21, Z+1	; 0x01
				if(lowPulse >= MAX_VAL){
 308:	68 3e       	cpi	r22, 0xE8	; 232
 30a:	dd ef       	ldi	r29, 0xFD	; 253
 30c:	7d 07       	cpc	r23, r29
 30e:	f0 f2       	brcs	.-68     	; 0x2cc <irLoop+0x66>
			pulses[currentPulse][1] = lowPulse;
			currentPulse++;
			//LCD_DisplayString(1, pulses[currentPulse]);
		}
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	08 95       	ret

0000031c <decodeTick>:

void decodeTick(){
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	0e e5       	ldi	r16, 0x5E	; 94
 324:	11 e0       	ldi	r17, 0x01	; 1
		if(pulses[0][0] > 100){
			LCD_DisplayString(1, "Power");
		}
	}*/
	unsigned char i = 0;
	for(i = 1; i < 33; i++){
 326:	c1 e0       	ldi	r28, 0x01	; 1
		LCD_Cursor(i);
 328:	8c 2f       	mov	r24, r28
 32a:	ed de       	rcall	.-550    	; 0x106 <LCD_Cursor>
		LCD_WriteData(pulses[i][0] + ' ');
 32c:	f8 01       	movw	r30, r16
 32e:	80 81       	ld	r24, Z
 330:	80 5e       	subi	r24, 0xE0	; 224
 332:	00 df       	rcall	.-512    	; 0x134 <LCD_WriteData>
		if(pulses[0][0] > 100){
			LCD_DisplayString(1, "Power");
		}
	}*/
	unsigned char i = 0;
	for(i = 1; i < 33; i++){
 334:	cf 5f       	subi	r28, 0xFF	; 255
 336:	0e 5f       	subi	r16, 0xFE	; 254
 338:	1f 4f       	sbci	r17, 0xFF	; 255
 33a:	c1 32       	cpi	r28, 0x21	; 33
 33c:	a9 f7       	brne	.-22     	; 0x328 <decodeTick+0xc>
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][0] + ' ');
	}
}
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <main>:

int main(void){
	DDRA = 0x00; PORTA = 0xFF; //Input
 346:	11 b8       	out	0x01, r1	; 1
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Ouptut
 34c:	84 b9       	out	0x04, r24	; 4
 34e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x0F; PORTC = 0xF0; 
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	97 b9       	out	0x07, r25	; 7
 354:	90 ef       	ldi	r25, 0xF0	; 240
 356:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 358:	8a b9       	out	0x0a, r24	; 10
	ADC_init();
 35a:	1b b8       	out	0x0b, r1	; 11
 35c:	7e df       	rcall	.-260    	; 0x25a <ADC_init>
 35e:	db de       	rcall	.-586    	; 0x116 <LCD_init>
 360:	cf de       	rcall	.-610    	; 0x100 <LCD_ClearScreen>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	d0 de       	rcall	.-608    	; 0x106 <LCD_Cursor>
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	64 df       	rcall	.-312    	; 0x238 <TimerSet>
 370:	03 df       	rcall	.-506    	; 0x178 <TimerOn>
 372:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <strings>
 376:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <strings+0x1>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	e4 de       	rcall	.-568    	; 0x146 <LCD_DisplayString>
 37e:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 382:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 386:	ca df       	rcall	.-108    	; 0x31c <decodeTick>
 388:	c2 e3       	ldi	r28, 0x32	; 50
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TimerFlag>
 390:	88 23       	and	r24, r24
 392:	e1 f3       	breq	.-8      	; 0x38c <main+0x46>
 394:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <TimerFlag>
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	c8 01       	movw	r24, r16
 39e:	63 df       	rcall	.-314    	; 0x266 <irLoop>
 3a0:	21 97       	sbiw	r28, 0x01	; 1
 3a2:	a1 f7       	brne	.-24     	; 0x38c <main+0x46>
 3a4:	f0 cf       	rjmp	.-32     	; 0x386 <main+0x40>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
