
acast050_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000039c  00000430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  00800140  00800140  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6e  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000602  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046e  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2b d1       	rcall	.+598    	; 0x31a <main>
  c4:	69 c1       	rjmp	.+722    	; 0x398 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	41 98       	cbi	0x08, 1	; 8
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	40 9a       	sbi	0x08, 0	; 8
  f4:	00 00       	nop
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	8b b9       	out	0x0b, r24	; 11
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	00 00       	nop
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 1ac:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
}


ISR(TIMER1_COMPA_vect) {
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
	_avr_timer_cntcurr--;
 1d2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_avr_timer_cntcurr>
 1d6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 1ec:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00;
}

void TimerISR() {
	TimerFlag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_avr_timer_cntcurr>
 21a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <_avr_timer_cntcurr+0x2>
 222:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <_avr_timer_cntcurr+0x3>
	}
}
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 248:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <_avr_timer_cntcurr>
 24c:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <_avr_timer_cntcurr+0x1>
 250:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_avr_timer_cntcurr+0x2>
 254:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <ADC_init>:
}

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <joyStick_Tick>:
}

enum JS_STATES {init, up, down, maintainD, maintainU} JS_STATE;
void joyStick_Tick(){
	static unsigned char pos = 0;
	unsigned char J = ~PINA & 0x08;
 266:	80 b1       	in	r24, 0x00	; 0
 268:	80 95       	com	r24
 26a:	88 70       	andi	r24, 0x08	; 8
	switch(JS_STATE){ //transitions
 26c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <JS_STATE>
 270:	92 30       	cpi	r25, 0x02	; 2
 272:	b1 f0       	breq	.+44     	; 0x2a0 <joyStick_Tick+0x3a>
 274:	28 f4       	brcc	.+10     	; 0x280 <joyStick_Tick+0x1a>
 276:	99 23       	and	r25, r25
 278:	41 f0       	breq	.+16     	; 0x28a <joyStick_Tick+0x24>
 27a:	91 30       	cpi	r25, 0x01	; 1
 27c:	e9 f0       	breq	.+58     	; 0x2b8 <joyStick_Tick+0x52>
 27e:	19 c0       	rjmp	.+50     	; 0x2b2 <joyStick_Tick+0x4c>
 280:	93 30       	cpi	r25, 0x03	; 3
 282:	91 f0       	breq	.+36     	; 0x2a8 <joyStick_Tick+0x42>
 284:	94 30       	cpi	r25, 0x04	; 4
 286:	c1 f0       	breq	.+48     	; 0x2b8 <joyStick_Tick+0x52>
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <joyStick_Tick+0x4c>
		case init:
			if(J > 0 && pos < ARR_SIZE - 1){
 28a:	88 23       	and	r24, r24
 28c:	81 f1       	breq	.+96     	; 0x2ee <joyStick_Tick+0x88>
 28e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	04 97       	sbiw	r24, 0x04	; 4
 296:	5c f5       	brge	.+86     	; 0x2ee <joyStick_Tick+0x88>
				JS_STATE = down;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <JS_STATE>
 29e:	12 c0       	rjmp	.+36     	; 0x2c4 <joyStick_Tick+0x5e>
			}
			break;
		case up:
			break;
		case down:
			JS_STATE = maintainD;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <JS_STATE>
			break;
 2a6:	08 95       	ret
		case maintainD:
			if(J == 0){
 2a8:	81 11       	cpse	r24, r1
 2aa:	21 c0       	rjmp	.+66     	; 0x2ee <joyStick_Tick+0x88>
				JS_STATE = init;
 2ac:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <JS_STATE>
 2b0:	08 95       	ret
			}
			break;
		case maintainU:
			break;
		default:
			JS_STATE = init;
 2b2:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <JS_STATE>
			break;
 2b6:	08 95       	ret
	}
	switch(JS_STATE){ //actions
 2b8:	92 30       	cpi	r25, 0x02	; 2
 2ba:	21 f0       	breq	.+8      	; 0x2c4 <joyStick_Tick+0x5e>
 2bc:	c0 f0       	brcs	.+48     	; 0x2ee <joyStick_Tick+0x88>
 2be:	95 30       	cpi	r25, 0x05	; 5
 2c0:	80 f4       	brcc	.+32     	; 0x2e2 <joyStick_Tick+0x7c>
 2c2:	08 95       	ret
		case init:
			break;
		case up:
			break;
		case down:
			pos++;
 2c4:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__data_end>
 2c8:	ef 5f       	subi	r30, 0xFF	; 255
 2ca:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <__data_end>
			LCD_DisplayString(1, strings[pos]);
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	ec 5f       	subi	r30, 0xFC	; 252
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	60 81       	ld	r22, Z
 2da:	71 81       	ldd	r23, Z+1	; 0x01
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	33 cf       	rjmp	.-410    	; 0x146 <LCD_DisplayString>
			break;
 2e0:	08 95       	ret
		case maintainD:
			break;
		case maintainU:
			break;
		default:
			LCD_DisplayString(1, strings[0]);
 2e2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <strings>
 2e6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <strings+0x1>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	2c cf       	rjmp	.-424    	; 0x146 <LCD_DisplayString>
 2ee:	08 95       	ret

000002f0 <irLoop>:
void irLoop(){
	unsigned char highPulse = 0;
	unsigned char lowPulse = 0;
	static unsigned char currentPulse = 0;

	while(PINA & 0x01){
 2f0:	00 9b       	sbis	0x00, 0	; 0
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <irLoop+0xe>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		highPulse++;
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
void irLoop(){
	unsigned char highPulse = 0;
	unsigned char lowPulse = 0;
	static unsigned char currentPulse = 0;

	while(PINA & 0x01){
 2f8:	00 99       	sbic	0x00, 0	; 0
 2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <irLoop+0x6>
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <irLoop+0x10>
			break;
	}
}

void irLoop(){
	unsigned char highPulse = 0;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
	static unsigned char currentPulse = 0;

	while(PINA & 0x01){
		highPulse++;
	}
	pulses[currentPulse][0] = highPulse;
 300:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <pulses>
	while(!(PINA & 0x01)){
 304:	00 99       	sbic	0x00, 0	; 0
 306:	05 c0       	rjmp	.+10     	; 0x312 <irLoop+0x22>
 308:	80 e0       	ldi	r24, 0x00	; 0
		lowPulse++;
 30a:	8f 5f       	subi	r24, 0xFF	; 255

	while(PINA & 0x01){
		highPulse++;
	}
	pulses[currentPulse][0] = highPulse;
	while(!(PINA & 0x01)){
 30c:	00 9b       	sbis	0x00, 0	; 0
 30e:	fd cf       	rjmp	.-6      	; 0x30a <irLoop+0x1a>
 310:	01 c0       	rjmp	.+2      	; 0x314 <irLoop+0x24>
	}
}

void irLoop(){
	unsigned char highPulse = 0;
	unsigned char lowPulse = 0;
 312:	80 e0       	ldi	r24, 0x00	; 0
	}
	pulses[currentPulse][0] = highPulse;
	while(!(PINA & 0x01)){
		lowPulse++;
	}
	pulses[currentPulse][1] = lowPulse;
 314:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <pulses+0x1>
 318:	08 95       	ret

0000031a <main>:
}

int main(void){
	DDRA = 0x00; PORTA = 0xFF; //Input
 31a:	11 b8       	out	0x01, r1	; 1
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Ouptut
 320:	84 b9       	out	0x04, r24	; 4
 322:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x0F; PORTC = 0xF0; 
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	97 b9       	out	0x07, r25	; 7
 328:	90 ef       	ldi	r25, 0xF0	; 240
 32a:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 32c:	8a b9       	out	0x0a, r24	; 10
	ADC_init();
 32e:	1b b8       	out	0x0b, r1	; 11
 330:	94 df       	rcall	.-216    	; 0x25a <ADC_init>
 332:	f1 de       	rcall	.-542    	; 0x116 <LCD_init>
 334:	e5 de       	rcall	.-566    	; 0x100 <LCD_ClearScreen>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	e6 de       	rcall	.-564    	; 0x106 <LCD_Cursor>
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	7a df       	rcall	.-268    	; 0x238 <TimerSet>
 344:	19 df       	rcall	.-462    	; 0x178 <TimerOn>
 346:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <strings>
 34a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <strings+0x1>
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	fa de       	rcall	.-524    	; 0x146 <LCD_DisplayString>
 352:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 356:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 35a:	c8 e7       	ldi	r28, 0x78	; 120
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	83 df       	rcall	.-250    	; 0x266 <joyStick_Tick>
 360:	12 e3       	ldi	r17, 0x32	; 50
 362:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <TimerFlag>
 366:	88 23       	and	r24, r24
 368:	e1 f3       	breq	.-8      	; 0x362 <main+0x48>
 36a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <TimerFlag>
 36e:	c0 df       	rcall	.-128    	; 0x2f0 <irLoop>
 370:	88 81       	ld	r24, Y
 372:	99 81       	ldd	r25, Y+1	; 0x01
 374:	85 b9       	out	0x05, r24	; 5
 376:	28 b1       	in	r18, 0x08	; 8
 378:	90 ff       	sbrs	r25, 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <main+0x66>
 37c:	24 60       	ori	r18, 0x04	; 4
 37e:	01 c0       	rjmp	.+2      	; 0x382 <main+0x68>
 380:	2b 7f       	andi	r18, 0xFB	; 251
 382:	28 b9       	out	0x08, r18	; 8
 384:	88 b1       	in	r24, 0x08	; 8
 386:	91 ff       	sbrs	r25, 1
 388:	02 c0       	rjmp	.+4      	; 0x38e <main+0x74>
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	01 c0       	rjmp	.+2      	; 0x390 <main+0x76>
 38e:	87 7f       	andi	r24, 0xF7	; 247
 390:	88 b9       	out	0x08, r24	; 8
 392:	11 50       	subi	r17, 0x01	; 1
 394:	31 f7       	brne	.-52     	; 0x362 <main+0x48>
 396:	e3 cf       	rjmp	.-58     	; 0x35e <main+0x44>

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
