
acast050_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000472  00800100  0000097c  00000a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002eb  00800572  00800572  00000e82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d25  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acd  00000000  00000000  00002d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce2  00000000  00000000  000037f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  000044d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075a  00000000  00000000  0000479c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001016  00000000  00000000  00004ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	15 e0       	ldi	r17, 0x05	; 5
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 37       	cpi	r26, 0x72	; 114
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	a2 e7       	ldi	r26, 0x72	; 114
  b6:	b5 e0       	ldi	r27, 0x05	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 35       	cpi	r26, 0x5D	; 93
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f0 d3       	rcall	.+2016   	; 0x8a4 <main>
  c4:	59 c4       	rjmp	.+2226   	; 0x978 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	SendCommand_LCD(0x04);		//set lcd Temp coefficient
	SendCommand_LCD(0x14);		//set lcd bias mode
	SendCommand_LCD(0x20);		//set lcd control in basic mode set (H=0)
	SendCommand_LCD(0x0C);		//set display configuration control in normal mode (alternative: blank, all on, inverse video)
	//SendCommand_LCD(0x0D);	//set display configuration control in inverse mode
	LCD_clear();
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	41 98       	cbi	0x08, 1	; 8
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	40 9a       	sbi	0x08, 0	; 8
  f4:	00 00       	nop
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	8b b9       	out	0x0b, r24	; 11
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	00 00       	nop
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <_avr_timer_cntcurr>
 1ac:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 76 05 	sts	0x0576, r26	; 0x800576 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 77 05 	sts	0x0577, r27	; 0x800577 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <_avr_timer_cntcurr>
 1d6:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 76 05 	lds	r26, 0x0576	; 0x800576 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 77 05 	lds	r27, 0x0577	; 0x800577 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <_avr_timer_cntcurr>
 1ec:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 76 05 	sts	0x0576, r26	; 0x800576 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 77 05 	sts	0x0577, r27	; 0x800577 <_avr_timer_cntcurr+0x3>
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <TimerFlag>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <_avr_timer_cntcurr>
 21a:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 76 05 	sts	0x0576, r26	; 0x800576 <_avr_timer_cntcurr+0x2>
 222:	b0 93 77 05 	sts	0x0577, r27	; 0x800577 <_avr_timer_cntcurr+0x3>
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 248:	60 93 74 05 	sts	0x0574, r22	; 0x800574 <_avr_timer_cntcurr>
 24c:	70 93 75 05 	sts	0x0575, r23	; 0x800575 <_avr_timer_cntcurr+0x1>
 250:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <_avr_timer_cntcurr+0x2>
 254:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <ADC_init>:
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <joyStick_Tick>:
 266:	04 99       	sbic	0x00, 4	; 0
 268:	08 c0       	rjmp	.+16     	; 0x27a <joyStick_Tick+0x14>
 26a:	81 e1       	ldi	r24, 0x11	; 17
 26c:	4c df       	rcall	.-360    	; 0x106 <LCD_Cursor>
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	61 df       	rcall	.-318    	; 0x134 <LCD_WriteData>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	48 df       	rcall	.-368    	; 0x106 <LCD_Cursor>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	5d cf       	rjmp	.-326    	; 0x134 <LCD_WriteData>
 27a:	08 95       	ret

0000027c <irLoop>:
 27c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 280:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 284:	28 17       	cp	r18, r24
 286:	39 07       	cpc	r19, r25
 288:	81 f1       	breq	.+96     	; 0x2ea <irLoop+0x6e>
 28a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 28e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 292:	82 17       	cp	r24, r18
 294:	93 07       	cpc	r25, r19
 296:	81 f1       	breq	.+96     	; 0x2f8 <irLoop+0x7c>
 298:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 29c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	e8 e7       	ldi	r30, 0x78	; 120
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <irLoop+0x3e>
 2aa:	40 81       	ld	r20, Z
 2ac:	51 81       	ldd	r21, Z+1	; 0x01
 2ae:	2f 5f       	subi	r18, 0xFF	; 255
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	28 3e       	cpi	r18, 0xE8	; 232
 2b4:	6d ef       	ldi	r22, 0xFD	; 253
 2b6:	36 07       	cpc	r19, r22
 2b8:	a1 f1       	breq	.+104    	; 0x322 <irLoop+0xa6>
 2ba:	84 17       	cp	r24, r20
 2bc:	95 07       	cpc	r25, r21
 2be:	a9 f7       	brne	.-22     	; 0x2aa <irLoop+0x2e>
 2c0:	1d c0       	rjmp	.+58     	; 0x2fc <irLoop+0x80>
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	40 81       	ld	r20, Z
 2c8:	51 81       	ldd	r21, Z+1	; 0x01
 2ca:	28 3e       	cpi	r18, 0xE8	; 232
 2cc:	bd ef       	ldi	r27, 0xFD	; 253
 2ce:	3b 07       	cpc	r19, r27
 2d0:	41 f1       	breq	.+80     	; 0x322 <irLoop+0xa6>
 2d2:	84 17       	cp	r24, r20
 2d4:	95 07       	cpc	r25, r21
 2d6:	a9 f3       	breq	.-22     	; 0x2c2 <irLoop+0x46>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	fb 01       	movw	r30, r22
 2de:	e7 57       	subi	r30, 0x77	; 119
 2e0:	f8 4f       	sbci	r31, 0xF8	; 248
 2e2:	21 83       	std	Z+1, r18	; 0x01
 2e4:	af 5f       	subi	r26, 0xFF	; 255
 2e6:	a0 93 72 07 	sts	0x0772, r26	; 0x800772 <currentPulse>
 2ea:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <currentPulse>
 2ee:	84 36       	cpi	r24, 0x64	; 100
 2f0:	c0 f0       	brcs	.+48     	; 0x322 <irLoop+0xa6>
 2f2:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <currentPulse>
 2f6:	08 95       	ret
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <currentPulse>
 300:	6a 2f       	mov	r22, r26
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	fb 01       	movw	r30, r22
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	e7 57       	subi	r30, 0x77	; 119
 30c:	f8 4f       	sbci	r31, 0xF8	; 248
 30e:	20 83       	st	Z, r18
 310:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 314:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	e8 e7       	ldi	r30, 0x78	; 120
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	d8 cf       	rjmp	.-80     	; 0x2d2 <irLoop+0x56>
 322:	08 95       	ret

00000324 <SendData_LCD>:
 324:	44 9a       	sbi	0x08, 4	; 8
 326:	45 9a       	sbi	0x08, 5	; 8
 328:	45 98       	cbi	0x08, 5	; 8
 32a:	27 e0       	ldi	r18, 0x07	; 7
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	ac 01       	movw	r20, r24
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <SendData_LCD+0x14>
 334:	56 95       	lsr	r21
 336:	47 95       	ror	r20
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <SendData_LCD+0x10>
 33c:	40 ff       	sbrs	r20, 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <SendData_LCD+0x20>
 340:	43 9a       	sbi	0x08, 3	; 8
 342:	01 c0       	rjmp	.+2      	; 0x346 <SendData_LCD+0x22>
 344:	43 98       	cbi	0x08, 3	; 8
 346:	42 9a       	sbi	0x08, 2	; 8
 348:	42 98       	cbi	0x08, 2	; 8
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	31 09       	sbc	r19, r1
 34e:	78 f7       	brcc	.-34     	; 0x32e <SendData_LCD+0xa>
 350:	45 9a       	sbi	0x08, 5	; 8
 352:	08 95       	ret

00000354 <SendCommand_LCD>:
 354:	bc 01       	movw	r22, r24
 356:	44 9a       	sbi	0x08, 4	; 8
 358:	45 9a       	sbi	0x08, 5	; 8
 35a:	88 b1       	in	r24, 0x08	; 8
 35c:	80 7c       	andi	r24, 0xC0	; 192
 35e:	88 b9       	out	0x08, r24	; 8
 360:	88 b1       	in	r24, 0x08	; 8
 362:	80 7e       	andi	r24, 0xE0	; 224
 364:	88 b9       	out	0x08, r24	; 8
 366:	27 e0       	ldi	r18, 0x07	; 7
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	ab 01       	movw	r20, r22
 36c:	02 2e       	mov	r0, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <SendCommand_LCD+0x20>
 370:	56 95       	lsr	r21
 372:	47 95       	ror	r20
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <SendCommand_LCD+0x1c>
 378:	40 ff       	sbrs	r20, 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <SendCommand_LCD+0x2c>
 37c:	43 9a       	sbi	0x08, 3	; 8
 37e:	03 c0       	rjmp	.+6      	; 0x386 <SendCommand_LCD+0x32>
 380:	98 b1       	in	r25, 0x08	; 8
 382:	90 7f       	andi	r25, 0xF0	; 240
 384:	98 b9       	out	0x08, r25	; 8
 386:	42 9a       	sbi	0x08, 2	; 8
 388:	98 b1       	in	r25, 0x08	; 8
 38a:	98 7f       	andi	r25, 0xF8	; 248
 38c:	98 b9       	out	0x08, r25	; 8
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	31 09       	sbc	r19, r1
 392:	58 f7       	brcc	.-42     	; 0x36a <SendCommand_LCD+0x16>
 394:	45 9a       	sbi	0x08, 5	; 8
 396:	08 95       	ret

00000398 <LCD_5110_init>:
 398:	87 b1       	in	r24, 0x07	; 7
 39a:	8c 67       	ori	r24, 0x7C	; 124
 39c:	87 b9       	out	0x07, r24	; 7
 39e:	46 9a       	sbi	0x08, 6	; 8
 3a0:	42 9a       	sbi	0x08, 2	; 8
 3a2:	85 ea       	ldi	r24, 0xA5	; 165
 3a4:	9e e0       	ldi	r25, 0x0E	; 14
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_5110_init+0xe>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <LCD_5110_init+0x14>
 3ac:	00 00       	nop
 3ae:	47 9a       	sbi	0x08, 7	; 8
 3b0:	8f e7       	ldi	r24, 0x7F	; 127
 3b2:	9e e3       	ldi	r25, 0x3E	; 62
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_5110_init+0x1c>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_5110_init+0x22>
 3ba:	00 00       	nop
 3bc:	46 9a       	sbi	0x08, 6	; 8
 3be:	88 b1       	in	r24, 0x08	; 8
 3c0:	80 6c       	ori	r24, 0xC0	; 192
 3c2:	88 b9       	out	0x08, r24	; 8
 3c4:	81 e2       	ldi	r24, 0x21	; 33
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	c5 df       	rcall	.-118    	; 0x354 <SendCommand_LCD>
 3ca:	8e eb       	ldi	r24, 0xBE	; 190
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	c2 df       	rcall	.-124    	; 0x354 <SendCommand_LCD>
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	bf df       	rcall	.-130    	; 0x354 <SendCommand_LCD>
 3d6:	83 e1       	ldi	r24, 0x13	; 19
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	bc df       	rcall	.-136    	; 0x354 <SendCommand_LCD>
 3dc:	80 e2       	ldi	r24, 0x20	; 32
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	b9 df       	rcall	.-142    	; 0x354 <SendCommand_LCD>
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	b6 cf       	rjmp	.-148    	; 0x354 <SendCommand_LCD>
 3e8:	08 95       	ret

000003ea <LCD_gotoXY>:
 3ea:	cf 93       	push	r28
 3ec:	c6 2f       	mov	r28, r22
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	b0 df       	rcall	.-160    	; 0x354 <SendCommand_LCD>
 3f4:	8c 2f       	mov	r24, r28
 3f6:	80 64       	ori	r24, 0x40	; 64
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	ac df       	rcall	.-168    	; 0x354 <SendCommand_LCD>
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <LCD_clear>:
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	08 e0       	ldi	r16, 0x08	; 8
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	08 c0       	rjmp	.+16     	; 0x41e <LCD_clear+0x1e>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	88 df       	rcall	.-240    	; 0x324 <SendData_LCD>
 414:	21 97       	sbiw	r28, 0x01	; 1
 416:	d9 f7       	brne	.-10     	; 0x40e <LCD_clear+0xe>
 418:	01 50       	subi	r16, 0x01	; 1
 41a:	11 09       	sbc	r17, r1
 41c:	19 f0       	breq	.+6      	; 0x424 <LCD_clear+0x24>
 41e:	ca e5       	ldi	r28, 0x5A	; 90
 420:	d0 e0       	ldi	r29, 0x00	; 0
 422:	f5 cf       	rjmp	.-22     	; 0x40e <LCD_clear+0xe>
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	e0 df       	rcall	.-64     	; 0x3ea <LCD_gotoXY>
 42a:	c9 e7       	ldi	r28, 0x79	; 121
 42c:	d5 e0       	ldi	r29, 0x05	; 5
 42e:	01 e7       	ldi	r16, 0x71	; 113
 430:	17 e0       	ldi	r17, 0x07	; 7
 432:	19 92       	st	Y+, r1
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	75 df       	rcall	.-278    	; 0x324 <SendData_LCD>
 43a:	c0 17       	cp	r28, r16
 43c:	d1 07       	cpc	r29, r17
 43e:	c9 f7       	brne	.-14     	; 0x432 <LCD_clear+0x32>
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <LCD_Update>:
void LCD_gotoXY (unsigned char x, unsigned char y){
    SendCommand_LCD(0x80 | x);   //column
	SendCommand_LCD(0x40 | y);   //row
}

void LCD_Update (void){
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	c9 e7       	ldi	r28, 0x79	; 121
 454:	d5 e0       	ldi	r29, 0x05	; 5
 456:	01 e7       	ldi	r16, 0x71	; 113
 458:	17 e0       	ldi	r17, 0x07	; 7
	for (short i = 0; i < 504; i++){
		SendData_LCD(LCDBuffer[i]);
 45a:	89 91       	ld	r24, Y+
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	62 df       	rcall	.-316    	; 0x324 <SendData_LCD>
    SendCommand_LCD(0x80 | x);   //column
	SendCommand_LCD(0x40 | y);   //row
}

void LCD_Update (void){
	for (short i = 0; i < 504; i++){
 460:	c0 17       	cp	r28, r16
 462:	d1 07       	cpc	r29, r17
 464:	d1 f7       	brne	.-12     	; 0x45a <LCD_Update+0x10>
		SendData_LCD(LCDBuffer[i]);
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <ReplaceBitmap>:

void ReplaceBitmap (char ReplacementBitmap[]){	//replaces the bitmap by filling the LCDBuffer with the ReplacementBitmap bytes, LCD_Update required after this function
 470:	dc 01       	movw	r26, r24
 472:	e9 e7       	ldi	r30, 0x79	; 121
 474:	f5 e0       	ldi	r31, 0x05	; 5
 476:	21 e7       	ldi	r18, 0x71	; 113
 478:	37 e0       	ldi	r19, 0x07	; 7
	for (short i = 0; i < 504; i++){
		LCDBuffer[i] = ReplacementBitmap[i];
 47a:	8d 91       	ld	r24, X+
 47c:	81 93       	st	Z+, r24
		SendData_LCD(LCDBuffer[i]);
	}
}

void ReplaceBitmap (char ReplacementBitmap[]){	//replaces the bitmap by filling the LCDBuffer with the ReplacementBitmap bytes, LCD_Update required after this function
	for (short i = 0; i < 504; i++){
 47e:	e2 17       	cp	r30, r18
 480:	f3 07       	cpc	r31, r19
 482:	d9 f7       	brne	.-10     	; 0x47a <ReplaceBitmap+0xa>
		LCDBuffer[i] = ReplacementBitmap[i];
	}
}
 484:	08 95       	ret

00000486 <SetPixel>:

void SetPixel (unsigned char xp, unsigned char yp, char bw){
	int YBit = yp % 8;				//determine which bit is affected by using modulo
 486:	26 2f       	mov	r18, r22
 488:	27 70       	andi	r18, 0x07	; 7
	int YByte = ((yp / 8) * 84) + xp;		//determine which byte is affected
 48a:	66 95       	lsr	r22
 48c:	66 95       	lsr	r22
 48e:	66 95       	lsr	r22
 490:	e8 2f       	mov	r30, r24
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	84 e5       	ldi	r24, 0x54	; 84
 496:	68 9f       	mul	r22, r24
 498:	e0 0d       	add	r30, r0
 49a:	f1 1d       	adc	r31, r1
 49c:	11 24       	eor	r1, r1
	
	if (bw == Black){				//draw a black pixel
 49e:	41 30       	cpi	r20, 0x01	; 1
 4a0:	69 f4       	brne	.+26     	; 0x4bc <SetPixel+0x36>
		LCDBuffer[YByte] |= (1<<YBit);
 4a2:	e7 58       	subi	r30, 0x87	; 135
 4a4:	fa 4f       	sbci	r31, 0xFA	; 250
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <SetPixel+0x2a>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	2a 95       	dec	r18
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <SetPixel+0x26>
 4b4:	90 81       	ld	r25, Z
 4b6:	89 2b       	or	r24, r25
 4b8:	80 83       	st	Z, r24
 4ba:	08 95       	ret
	}
	else{
		LCDBuffer[YByte] &= (~(1<<YBit));	//draw a white pixel
 4bc:	e7 58       	subi	r30, 0x87	; 135
 4be:	fa 4f       	sbci	r31, 0xFA	; 250
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <SetPixel+0x44>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	2a 95       	dec	r18
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <SetPixel+0x40>
 4ce:	80 95       	com	r24
 4d0:	90 81       	ld	r25, Z
 4d2:	89 23       	and	r24, r25
 4d4:	80 83       	st	Z, r24
 4d6:	08 95       	ret

000004d8 <DrawRectangle>:
	}
}

void DrawRectangle (int x1,int y1, int x2, int y2, char bw, char fill)	// LCD_Update required after this function
{
 4d8:	6f 92       	push	r6
 4da:	7f 92       	push	r7
 4dc:	8f 92       	push	r8
 4de:	9f 92       	push	r9
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	99 23       	and	r25, r25
 4f6:	14 f4       	brge	.+4      	; 0x4fc <DrawRectangle+0x24>
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	6c 01       	movw	r12, r24
 4fe:	84 e5       	ldi	r24, 0x54	; 84
 500:	c8 16       	cp	r12, r24
 502:	d1 04       	cpc	r13, r1
 504:	2c f0       	brlt	.+10     	; 0x510 <DrawRectangle+0x38>
 506:	0f 2e       	mov	r0, r31
 508:	f3 e5       	ldi	r31, 0x53	; 83
 50a:	cf 2e       	mov	r12, r31
 50c:	d1 2c       	mov	r13, r1
 50e:	f0 2d       	mov	r31, r0
 510:	84 2e       	mov	r8, r20
 512:	95 2e       	mov	r9, r21
 514:	99 20       	and	r9, r9
 516:	14 f4       	brge	.+4      	; 0x51c <DrawRectangle+0x44>
 518:	81 2c       	mov	r8, r1
 51a:	91 2c       	mov	r9, r1
 51c:	84 e5       	ldi	r24, 0x54	; 84
 51e:	88 16       	cp	r8, r24
 520:	91 04       	cpc	r9, r1
 522:	2c f0       	brlt	.+10     	; 0x52e <DrawRectangle+0x56>
 524:	0f 2e       	mov	r0, r31
 526:	f3 e5       	ldi	r31, 0x53	; 83
 528:	8f 2e       	mov	r8, r31
 52a:	91 2c       	mov	r9, r1
 52c:	f0 2d       	mov	r31, r0
 52e:	a6 2e       	mov	r10, r22
 530:	b7 2e       	mov	r11, r23
 532:	bb 20       	and	r11, r11
 534:	14 f4       	brge	.+4      	; 0x53a <DrawRectangle+0x62>
 536:	a1 2c       	mov	r10, r1
 538:	b1 2c       	mov	r11, r1
 53a:	80 e3       	ldi	r24, 0x30	; 48
 53c:	a8 16       	cp	r10, r24
 53e:	b1 04       	cpc	r11, r1
 540:	2c f0       	brlt	.+10     	; 0x54c <DrawRectangle+0x74>
 542:	0f 2e       	mov	r0, r31
 544:	ff e2       	ldi	r31, 0x2F	; 47
 546:	af 2e       	mov	r10, r31
 548:	b1 2c       	mov	r11, r1
 54a:	f0 2d       	mov	r31, r0
 54c:	c2 2f       	mov	r28, r18
 54e:	d3 2f       	mov	r29, r19
 550:	dd 23       	and	r29, r29
 552:	14 f4       	brge	.+4      	; 0x558 <DrawRectangle+0x80>
 554:	c0 e0       	ldi	r28, 0x00	; 0
 556:	d0 e0       	ldi	r29, 0x00	; 0
 558:	c0 33       	cpi	r28, 0x30	; 48
 55a:	d1 05       	cpc	r29, r1
 55c:	14 f0       	brlt	.+4      	; 0x562 <DrawRectangle+0x8a>
 55e:	cf e2       	ldi	r28, 0x2F	; 47
 560:	d0 e0       	ldi	r29, 0x00	; 0
	{
		RectangleStartByte +=84;
		LCDBuffer[RectangleStartByte]|=0xFF;
		LCDBuffer[RectangleStartByte+Rectangle_X_Delta]|=0xFF;
	}*/
	if (fill == NotFilled)				//draw a not filled rectangle
 562:	ee 20       	and	r14, r14
 564:	61 f0       	breq	.+24     	; 0x57e <DrawRectangle+0xa6>
		}
	}
	
	else								//draw a filled rectangle by drawing a vertical line from x1 posn to x2 posn
	{
		for (int j=0; j<(x2-x1); j++)
 566:	8c 18       	sub	r8, r12
 568:	9d 08       	sbc	r9, r13
 56a:	18 14       	cp	r1, r8
 56c:	19 04       	cpc	r1, r9
 56e:	0c f0       	brlt	.+2      	; 0x572 <DrawRectangle+0x9a>
 570:	49 c0       	rjmp	.+146    	; 0x604 <DrawRectangle+0x12c>
 572:	e1 2c       	mov	r14, r1
 574:	f1 2c       	mov	r15, r1
			{
				for (int i=0; i<=(y2-y1); i++)
 576:	3e 01       	movw	r6, r28
 578:	6a 18       	sub	r6, r10
 57a:	7b 08       	sbc	r7, r11
 57c:	3d c0       	rjmp	.+122    	; 0x5f8 <DrawRectangle+0x120>
		LCDBuffer[RectangleStartByte]|=0xFF;
		LCDBuffer[RectangleStartByte+Rectangle_X_Delta]|=0xFF;
	}*/
	if (fill == NotFilled)				//draw a not filled rectangle
	{
		for (int i=0; i<(x2-x1); i++)
 57e:	74 01       	movw	r14, r8
 580:	ec 18       	sub	r14, r12
 582:	fd 08       	sbc	r15, r13
 584:	1e 14       	cp	r1, r14
 586:	1f 04       	cpc	r1, r15
 588:	94 f4       	brge	.+36     	; 0x5ae <DrawRectangle+0xd6>
 58a:	1c 2d       	mov	r17, r12
 58c:	61 2c       	mov	r6, r1
 58e:	71 2c       	mov	r7, r1
		{
			SetPixel(i+x1,y1,bw);		// upper line
 590:	40 2f       	mov	r20, r16
 592:	6a 2d       	mov	r22, r10
 594:	81 2f       	mov	r24, r17
 596:	77 df       	rcall	.-274    	; 0x486 <SetPixel>
			SetPixel(i+x1,y2,bw);		// lower line
 598:	40 2f       	mov	r20, r16
 59a:	6c 2f       	mov	r22, r28
 59c:	81 2f       	mov	r24, r17
 59e:	73 df       	rcall	.-282    	; 0x486 <SetPixel>
		LCDBuffer[RectangleStartByte]|=0xFF;
		LCDBuffer[RectangleStartByte+Rectangle_X_Delta]|=0xFF;
	}*/
	if (fill == NotFilled)				//draw a not filled rectangle
	{
		for (int i=0; i<(x2-x1); i++)
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	68 1a       	sub	r6, r24
 5a4:	78 0a       	sbc	r7, r24
 5a6:	1f 5f       	subi	r17, 0xFF	; 255
 5a8:	6e 14       	cp	r6, r14
 5aa:	7f 04       	cpc	r7, r15
 5ac:	89 f7       	brne	.-30     	; 0x590 <DrawRectangle+0xb8>
		{
			SetPixel(i+x1,y1,bw);		// upper line
			SetPixel(i+x1,y2,bw);		// lower line
		}
		
		for (int i=0; i<=(y2-y1); i++)
 5ae:	ca 19       	sub	r28, r10
 5b0:	db 09       	sbc	r29, r11
 5b2:	42 f1       	brmi	.+80     	; 0x604 <DrawRectangle+0x12c>
 5b4:	e1 2c       	mov	r14, r1
 5b6:	f1 2c       	mov	r15, r1
		{
			SetPixel(x1,i+y1,bw);		// left line
 5b8:	40 2f       	mov	r20, r16
 5ba:	6a 2d       	mov	r22, r10
 5bc:	8c 2d       	mov	r24, r12
			SetPixel(x2,i+y1,bw);		// right line
 5be:	63 df       	rcall	.-314    	; 0x486 <SetPixel>
 5c0:	40 2f       	mov	r20, r16
 5c2:	6a 2d       	mov	r22, r10
 5c4:	88 2d       	mov	r24, r8
		{
			SetPixel(i+x1,y1,bw);		// upper line
			SetPixel(i+x1,y2,bw);		// lower line
		}
		
		for (int i=0; i<=(y2-y1); i++)
 5c6:	5f df       	rcall	.-322    	; 0x486 <SetPixel>
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	e8 1a       	sub	r14, r24
 5cc:	f8 0a       	sbc	r15, r24
 5ce:	a3 94       	inc	r10
 5d0:	ce 15       	cp	r28, r14
 5d2:	df 05       	cpc	r29, r15
	{
		for (int j=0; j<(x2-x1); j++)
			{
				for (int i=0; i<=(y2-y1); i++)
				{
					SetPixel(j+x1,i+y1,bw);		
 5d4:	8c f7       	brge	.-30     	; 0x5b8 <DrawRectangle+0xe0>
 5d6:	16 c0       	rjmp	.+44     	; 0x604 <DrawRectangle+0x12c>
 5d8:	40 2f       	mov	r20, r16
 5da:	6d 2d       	mov	r22, r13
 5dc:	8c 2d       	mov	r24, r12
	
	else								//draw a filled rectangle by drawing a vertical line from x1 posn to x2 posn
	{
		for (int j=0; j<(x2-x1); j++)
			{
				for (int i=0; i<=(y2-y1); i++)
 5de:	53 df       	rcall	.-346    	; 0x486 <SetPixel>
 5e0:	21 96       	adiw	r28, 0x01	; 1
 5e2:	d3 94       	inc	r13
 5e4:	6c 16       	cp	r6, r28
 5e6:	7d 06       	cpc	r7, r29
		}
	}
	
	else								//draw a filled rectangle by drawing a vertical line from x1 posn to x2 posn
	{
		for (int j=0; j<(x2-x1); j++)
 5e8:	bc f7       	brge	.-18     	; 0x5d8 <DrawRectangle+0x100>
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	e8 1a       	sub	r14, r24
 5ee:	f8 0a       	sbc	r15, r24
 5f0:	c3 94       	inc	r12
 5f2:	e8 14       	cp	r14, r8
 5f4:	f9 04       	cpc	r15, r9
			{
				for (int i=0; i<=(y2-y1); i++)
 5f6:	31 f0       	breq	.+12     	; 0x604 <DrawRectangle+0x12c>
 5f8:	77 20       	and	r7, r7
 5fa:	bc f3       	brlt	.-18     	; 0x5ea <DrawRectangle+0x112>
 5fc:	da 2c       	mov	r13, r10
 5fe:	c0 e0       	ldi	r28, 0x00	; 0
 600:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
	}
	
		
 602:	ea cf       	rjmp	.-44     	; 0x5d8 <DrawRectangle+0x100>
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	af 90       	pop	r10
 618:	9f 90       	pop	r9
 61a:	8f 90       	pop	r8
 61c:	7f 90       	pop	r7
 61e:	6f 90       	pop	r6
 620:	08 95       	ret

00000622 <decodeTick>:
	if(currentPulse >= 100){
		currentPulse = 0;
	}
}

void decodeTick(){
 622:	ef 92       	push	r14
 624:	0f 93       	push	r16
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
	for(i = 0; i < currentPulse; i++){
 626:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <currentPulse>
 62a:	22 23       	and	r18, r18
 62c:	b1 f0       	breq	.+44     	; 0x65a <decodeTick+0x38>
 62e:	e9 e8       	ldi	r30, 0x89	; 137
 630:	f7 e0       	ldi	r31, 0x07	; 7
 632:	4f ef       	ldi	r20, 0xFF	; 255
 634:	42 0f       	add	r20, r18
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	45 57       	subi	r20, 0x75	; 117
 63e:	58 4f       	sbci	r21, 0xF8	; 248
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	cb 01       	movw	r24, r22
		averageHigh += pulses[i][0];
 646:	30 81       	ld	r19, Z
 648:	63 0f       	add	r22, r19
 64a:	71 1d       	adc	r23, r1
 64c:	81 1d       	adc	r24, r1
 64e:	91 1d       	adc	r25, r1
 650:	32 96       	adiw	r30, 0x02	; 2
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
	for(i = 0; i < currentPulse; i++){
 652:	e4 17       	cp	r30, r20
 654:	f5 07       	cpc	r31, r21
 656:	b9 f7       	brne	.-18     	; 0x646 <decodeTick+0x24>
 658:	03 c0       	rjmp	.+6      	; 0x660 <decodeTick+0x3e>
	for(i = 17; i <33; i++){
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	cb 01       	movw	r24, r22
	for(i = 0; i < currentPulse; i++){
		averageHigh += pulses[i][0];
	}
	averageHigh = averageHigh / currentPulse;
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	66 d1       	rcall	.+716    	; 0x934 <__udivmodsi4>
	//LCD_Cursor(1);
	//LCD_WriteData(averageHigh + ' ');

	if(averageHigh > 45 && averageHigh < 57 ){
 668:	da 01       	movw	r26, r20
 66a:	c9 01       	movw	r24, r18
 66c:	8e 97       	sbiw	r24, 0x2e	; 46
 66e:	a1 09       	sbc	r26, r1
 670:	b1 09       	sbc	r27, r1
 672:	0b 97       	sbiw	r24, 0x0b	; 11
 674:	a1 05       	cpc	r26, r1
 676:	b1 05       	cpc	r27, r1
 678:	08 f0       	brcs	.+2      	; 0x67c <decodeTick+0x5a>
 67a:	68 c0       	rjmp	.+208    	; 0x74c <decodeTick+0x12a>
		LCD_DisplayString(1, "Power!");
 67c:	64 ef       	ldi	r22, 0xF4	; 244
 67e:	74 e0       	ldi	r23, 0x04	; 4
 680:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Cursor(17);
 682:	61 dd       	rcall	.-1342   	; 0x146 <LCD_DisplayString>
 684:	81 e1       	ldi	r24, 0x11	; 17
		LCD_WriteData(0x0);
 686:	3f dd       	rcall	.-1410   	; 0x106 <LCD_Cursor>
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	54 dd       	rcall	.-1368   	; 0x134 <LCD_WriteData>
		if(powerBool == 0){
 68c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <powerBool.2108>
 690:	81 11       	cpse	r24, r1
 692:	05 c1       	rjmp	.+522    	; 0x89e <decodeTick+0x27c>
			unsigned char temp = PORTC & 0x80;
			if(temp){
				PORTC = PORTC & 0x7F;
				on = 0;
 694:	47 9b       	sbis	0x08, 7	; 8
 696:	1a c0       	rjmp	.+52     	; 0x6cc <decodeTick+0xaa>
				LCD_clear();
 698:	47 98       	cbi	0x08, 7	; 8
				LCD_Update();
 69a:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <on>
				LCD_DisplayString(1, "Goodbye");
 69e:	b0 de       	rcall	.-672    	; 0x400 <LCD_clear>
 6a0:	d4 de       	rcall	.-600    	; 0x44a <LCD_Update>
 6a2:	6b ef       	ldi	r22, 0xFB	; 251
				LCD_Cursor(17);
 6a4:	74 e0       	ldi	r23, 0x04	; 4
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	4e dd       	rcall	.-1380   	; 0x146 <LCD_DisplayString>
				LCD_WriteData(0x0);
 6aa:	81 e1       	ldi	r24, 0x11	; 17
 6ac:	2c dd       	rcall	.-1448   	; 0x106 <LCD_Cursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	41 dd       	rcall	.-1406   	; 0x134 <LCD_WriteData>
 6b2:	2f e7       	ldi	r18, 0x7F	; 127
 6b4:	84 e8       	ldi	r24, 0x84	; 132
 6b6:	9e e1       	ldi	r25, 0x1E	; 30
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	80 40       	sbci	r24, 0x00	; 0
 6bc:	90 40       	sbci	r25, 0x00	; 0
				_delay_ms(10000);
				LCD_ClearScreen();
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <decodeTick+0x96>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <decodeTick+0xa0>
				powerBool = 0;
 6c2:	00 00       	nop
 6c4:	1d dd       	rcall	.-1478   	; 0x100 <LCD_ClearScreen>
				return;
			}
			else{
				PORTC = PORTC | 0x80;
 6c6:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <powerBool.2108>
 6ca:	e9 c0       	rjmp	.+466    	; 0x89e <decodeTick+0x27c>
 6cc:	47 9a       	sbi	0x08, 7	; 8
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <on>
 6d4:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <__data_end>
 6d8:	81 11       	cpse	r24, r1
 6da:	0e c0       	rjmp	.+28     	; 0x6f8 <decodeTick+0xd6>
 6dc:	8c ef       	ldi	r24, 0xFC	; 252
 6de:	92 e0       	ldi	r25, 0x02	; 2
 6e0:	c7 de       	rcall	.-626    	; 0x470 <ReplaceBitmap>
 6e2:	b3 de       	rcall	.-666    	; 0x44a <LCD_Update>
 6e4:	2f e1       	ldi	r18, 0x1F	; 31
 6e6:	81 ea       	ldi	r24, 0xA1	; 161
 6e8:	97 e0       	ldi	r25, 0x07	; 7
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <decodeTick+0xc8>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <decodeTick+0xd2>
 6f4:	00 00       	nop
 6f6:	26 c0       	rjmp	.+76     	; 0x744 <decodeTick+0x122>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	71 f4       	brne	.+28     	; 0x718 <decodeTick+0xf6>
 6fc:	84 e0       	ldi	r24, 0x04	; 4
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	b7 de       	rcall	.-658    	; 0x470 <ReplaceBitmap>
 702:	a3 de       	rcall	.-698    	; 0x44a <LCD_Update>
 704:	2f e1       	ldi	r18, 0x1F	; 31
 706:	81 ea       	ldi	r24, 0xA1	; 161
 708:	97 e0       	ldi	r25, 0x07	; 7
 70a:	21 50       	subi	r18, 0x01	; 1
 70c:	80 40       	sbci	r24, 0x00	; 0
 70e:	90 40       	sbci	r25, 0x00	; 0
 710:	e1 f7       	brne	.-8      	; 0x70a <decodeTick+0xe8>
 712:	00 c0       	rjmp	.+0      	; 0x714 <decodeTick+0xf2>
 714:	00 00       	nop
 716:	16 c0       	rjmp	.+44     	; 0x744 <decodeTick+0x122>
 718:	73 de       	rcall	.-794    	; 0x400 <LCD_clear>
 71a:	e1 2c       	mov	r14, r1
 71c:	01 e0       	ldi	r16, 0x01	; 1
 71e:	28 e2       	ldi	r18, 0x28	; 40
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	4f e4       	ldi	r20, 0x4F	; 79
 724:	50 e0       	ldi	r21, 0x00	; 0
 726:	65 e0       	ldi	r22, 0x05	; 5
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	85 e0       	ldi	r24, 0x05	; 5
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	d4 de       	rcall	.-600    	; 0x4d8 <DrawRectangle>
 730:	8c de       	rcall	.-744    	; 0x44a <LCD_Update>
 732:	2f e1       	ldi	r18, 0x1F	; 31
 734:	81 ea       	ldi	r24, 0xA1	; 161
 736:	97 e0       	ldi	r25, 0x07	; 7
 738:	21 50       	subi	r18, 0x01	; 1
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	90 40       	sbci	r25, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <decodeTick+0x116>
 740:	00 c0       	rjmp	.+0      	; 0x742 <decodeTick+0x120>
 742:	00 00       	nop
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <powerBool.2108>
 74a:	a9 c0       	rjmp	.+338    	; 0x89e <decodeTick+0x27c>
 74c:	da 01       	movw	r26, r20
 74e:	c9 01       	movw	r24, r18
 750:	8e 54       	subi	r24, 0x4E	; 78
 752:	91 09       	sbc	r25, r1
 754:	a1 09       	sbc	r26, r1
 756:	b1 09       	sbc	r27, r1
 758:	06 97       	sbiw	r24, 0x06	; 6
 75a:	a1 05       	cpc	r26, r1
 75c:	b1 05       	cpc	r27, r1
 75e:	08 f0       	brcs	.+2      	; 0x762 <decodeTick+0x140>
 760:	4b c0       	rjmp	.+150    	; 0x7f8 <decodeTick+0x1d6>
 762:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <on>
 766:	88 23       	and	r24, r24
 768:	09 f4       	brne	.+2      	; 0x76c <decodeTick+0x14a>
 76a:	99 c0       	rjmp	.+306    	; 0x89e <decodeTick+0x27c>
 76c:	63 e0       	ldi	r22, 0x03	; 3
 76e:	75 e0       	ldi	r23, 0x05	; 5
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	e9 dc       	rcall	.-1582   	; 0x146 <LCD_DisplayString>
 774:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <powerBool.2108>
 778:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <__data_end>
 77c:	82 30       	cpi	r24, 0x02	; 2
 77e:	18 f4       	brcc	.+6      	; 0x786 <decodeTick+0x164>
 780:	8f 5f       	subi	r24, 0xFF	; 255
 782:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <__data_end>
 786:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <__data_end>
 78a:	81 11       	cpse	r24, r1
 78c:	0e c0       	rjmp	.+28     	; 0x7aa <decodeTick+0x188>
 78e:	8c ef       	ldi	r24, 0xFC	; 252
 790:	92 e0       	ldi	r25, 0x02	; 2
 792:	6e de       	rcall	.-804    	; 0x470 <ReplaceBitmap>
 794:	5a de       	rcall	.-844    	; 0x44a <LCD_Update>
 796:	2f e1       	ldi	r18, 0x1F	; 31
 798:	81 ea       	ldi	r24, 0xA1	; 161
 79a:	97 e0       	ldi	r25, 0x07	; 7
 79c:	21 50       	subi	r18, 0x01	; 1
 79e:	80 40       	sbci	r24, 0x00	; 0
 7a0:	90 40       	sbci	r25, 0x00	; 0
 7a2:	e1 f7       	brne	.-8      	; 0x79c <decodeTick+0x17a>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <decodeTick+0x184>
 7a6:	00 00       	nop
 7a8:	7a c0       	rjmp	.+244    	; 0x89e <decodeTick+0x27c>
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	71 f4       	brne	.+28     	; 0x7ca <decodeTick+0x1a8>
 7ae:	84 e0       	ldi	r24, 0x04	; 4
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	5e de       	rcall	.-836    	; 0x470 <ReplaceBitmap>
 7b4:	4a de       	rcall	.-876    	; 0x44a <LCD_Update>
 7b6:	2f e1       	ldi	r18, 0x1F	; 31
 7b8:	81 ea       	ldi	r24, 0xA1	; 161
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	21 50       	subi	r18, 0x01	; 1
 7be:	80 40       	sbci	r24, 0x00	; 0
 7c0:	90 40       	sbci	r25, 0x00	; 0
 7c2:	e1 f7       	brne	.-8      	; 0x7bc <decodeTick+0x19a>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <decodeTick+0x1a4>
 7c6:	00 00       	nop
 7c8:	6a c0       	rjmp	.+212    	; 0x89e <decodeTick+0x27c>
 7ca:	1a de       	rcall	.-972    	; 0x400 <LCD_clear>
 7cc:	e1 2c       	mov	r14, r1
 7ce:	01 e0       	ldi	r16, 0x01	; 1
 7d0:	28 e2       	ldi	r18, 0x28	; 40
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	4f e4       	ldi	r20, 0x4F	; 79
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	65 e0       	ldi	r22, 0x05	; 5
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	85 e0       	ldi	r24, 0x05	; 5
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	7b de       	rcall	.-778    	; 0x4d8 <DrawRectangle>
 7e2:	33 de       	rcall	.-922    	; 0x44a <LCD_Update>
 7e4:	2f e1       	ldi	r18, 0x1F	; 31
 7e6:	81 ea       	ldi	r24, 0xA1	; 161
 7e8:	97 e0       	ldi	r25, 0x07	; 7
 7ea:	21 50       	subi	r18, 0x01	; 1
 7ec:	80 40       	sbci	r24, 0x00	; 0
 7ee:	90 40       	sbci	r25, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <decodeTick+0x1c8>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <decodeTick+0x1d2>
 7f4:	00 00       	nop
 7f6:	53 c0       	rjmp	.+166    	; 0x89e <decodeTick+0x27c>
 7f8:	da 01       	movw	r26, r20
 7fa:	c9 01       	movw	r24, r18
 7fc:	8c 55       	subi	r24, 0x5C	; 92
 7fe:	91 09       	sbc	r25, r1
 800:	a1 09       	sbc	r26, r1
 802:	b1 09       	sbc	r27, r1
 804:	86 97       	sbiw	r24, 0x26	; 38
 806:	a1 05       	cpc	r26, r1
 808:	b1 05       	cpc	r27, r1
 80a:	08 f0       	brcs	.+2      	; 0x80e <decodeTick+0x1ec>
 80c:	48 c0       	rjmp	.+144    	; 0x89e <decodeTick+0x27c>
 80e:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <on>
 812:	88 23       	and	r24, r24
 814:	09 f4       	brne	.+2      	; 0x818 <decodeTick+0x1f6>
 816:	43 c0       	rjmp	.+134    	; 0x89e <decodeTick+0x27c>
 818:	60 e2       	ldi	r22, 0x20	; 32
 81a:	75 e0       	ldi	r23, 0x05	; 5
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	93 dc       	rcall	.-1754   	; 0x146 <LCD_DisplayString>
 820:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <powerBool.2108>
 824:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <__data_end>
 828:	88 23       	and	r24, r24
 82a:	29 f0       	breq	.+10     	; 0x836 <decodeTick+0x214>
 82c:	81 50       	subi	r24, 0x01	; 1
 82e:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <__data_end>
 832:	81 11       	cpse	r24, r1
 834:	0e c0       	rjmp	.+28     	; 0x852 <decodeTick+0x230>
 836:	8c ef       	ldi	r24, 0xFC	; 252
 838:	92 e0       	ldi	r25, 0x02	; 2
 83a:	1a de       	rcall	.-972    	; 0x470 <ReplaceBitmap>
 83c:	06 de       	rcall	.-1012   	; 0x44a <LCD_Update>
 83e:	2f e1       	ldi	r18, 0x1F	; 31
 840:	81 ea       	ldi	r24, 0xA1	; 161
 842:	97 e0       	ldi	r25, 0x07	; 7
 844:	21 50       	subi	r18, 0x01	; 1
 846:	80 40       	sbci	r24, 0x00	; 0
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <decodeTick+0x222>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <decodeTick+0x22c>
 84e:	00 00       	nop
 850:	26 c0       	rjmp	.+76     	; 0x89e <decodeTick+0x27c>
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	71 f4       	brne	.+28     	; 0x872 <decodeTick+0x250>
 856:	84 e0       	ldi	r24, 0x04	; 4
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	0a de       	rcall	.-1004   	; 0x470 <ReplaceBitmap>
 85c:	f6 dd       	rcall	.-1044   	; 0x44a <LCD_Update>
 85e:	2f e1       	ldi	r18, 0x1F	; 31
 860:	81 ea       	ldi	r24, 0xA1	; 161
 862:	97 e0       	ldi	r25, 0x07	; 7
 864:	21 50       	subi	r18, 0x01	; 1
 866:	80 40       	sbci	r24, 0x00	; 0
 868:	90 40       	sbci	r25, 0x00	; 0
 86a:	e1 f7       	brne	.-8      	; 0x864 <decodeTick+0x242>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <decodeTick+0x24c>
 86e:	00 00       	nop
 870:	16 c0       	rjmp	.+44     	; 0x89e <decodeTick+0x27c>
 872:	c6 dd       	rcall	.-1140   	; 0x400 <LCD_clear>
 874:	e1 2c       	mov	r14, r1
 876:	01 e0       	ldi	r16, 0x01	; 1
 878:	28 e2       	ldi	r18, 0x28	; 40
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	4f e4       	ldi	r20, 0x4F	; 79
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	65 e0       	ldi	r22, 0x05	; 5
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	85 e0       	ldi	r24, 0x05	; 5
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	27 de       	rcall	.-946    	; 0x4d8 <DrawRectangle>
 88a:	df dd       	rcall	.-1090   	; 0x44a <LCD_Update>
 88c:	2f e1       	ldi	r18, 0x1F	; 31
 88e:	81 ea       	ldi	r24, 0xA1	; 161
 890:	97 e0       	ldi	r25, 0x07	; 7
 892:	21 50       	subi	r18, 0x01	; 1
 894:	80 40       	sbci	r24, 0x00	; 0
 896:	90 40       	sbci	r25, 0x00	; 0
 898:	e1 f7       	brne	.-8      	; 0x892 <decodeTick+0x270>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <decodeTick+0x27a>
 89c:	00 00       	nop
 89e:	0f 91       	pop	r16
 8a0:	ef 90       	pop	r14
 8a2:	08 95       	ret

000008a4 <main>:
 8a4:	11 b8       	out	0x01, r1	; 1
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	82 b9       	out	0x02, r24	; 2
 8aa:	84 b9       	out	0x04, r24	; 4
 8ac:	15 b8       	out	0x05, r1	; 5
 8ae:	87 b9       	out	0x07, r24	; 7
 8b0:	18 b8       	out	0x08, r1	; 8
 8b2:	8a b9       	out	0x0a, r24	; 10
 8b4:	1b b8       	out	0x0b, r1	; 11
 8b6:	80 e3       	ldi	r24, 0x30	; 48
 8b8:	d0 dc       	rcall	.-1632   	; 0x25a <ADC_init>
 8ba:	2d dc       	rcall	.-1958   	; 0x116 <LCD_init>
 8bc:	21 dc       	rcall	.-1982   	; 0x100 <LCD_ClearScreen>
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	22 dc       	rcall	.-1980   	; 0x106 <LCD_Cursor>
 8c2:	61 e0       	ldi	r22, 0x01	; 1
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	b6 dc       	rcall	.-1684   	; 0x238 <TimerSet>
 8cc:	55 dc       	rcall	.-1878   	; 0x178 <TimerOn>
 8ce:	64 dd       	rcall	.-1336   	; 0x398 <LCD_5110_init>
 8d0:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8d4:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 8d8:	47 98       	cbi	0x08, 7	; 8
 8da:	d0 e0       	ldi	r29, 0x00	; 0
 8dc:	ff 24       	eor	r15, r15
 8de:	f3 94       	inc	r15
 8e0:	d1 11       	cpse	r29, r1
 8e2:	15 c0       	rjmp	.+42     	; 0x90e <main+0x6a>
 8e4:	80 e4       	ldi	r24, 0x40	; 64
 8e6:	03 dc       	rcall	.-2042   	; 0xee <LCD_WriteCommand>
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	24 dc       	rcall	.-1976   	; 0x134 <LCD_WriteData>
 8ec:	8a e0       	ldi	r24, 0x0A	; 10
 8ee:	22 dc       	rcall	.-1980   	; 0x134 <LCD_WriteData>
 8f0:	8a e0       	ldi	r24, 0x0A	; 10
 8f2:	20 dc       	rcall	.-1984   	; 0x134 <LCD_WriteData>
 8f4:	8a e0       	ldi	r24, 0x0A	; 10
 8f6:	1e dc       	rcall	.-1988   	; 0x134 <LCD_WriteData>
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	1c dc       	rcall	.-1992   	; 0x134 <LCD_WriteData>
 8fc:	81 e1       	ldi	r24, 0x11	; 17
 8fe:	1a dc       	rcall	.-1996   	; 0x134 <LCD_WriteData>
 900:	8e e0       	ldi	r24, 0x0E	; 14
 902:	18 dc       	rcall	.-2000   	; 0x134 <LCD_WriteData>
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	16 dc       	rcall	.-2004   	; 0x134 <LCD_WriteData>
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	f1 db       	rcall	.-2078   	; 0xee <LCD_WriteCommand>
 90c:	df 2d       	mov	r29, r15
 90e:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <on>
 912:	81 11       	cpse	r24, r1
 914:	a8 dc       	rcall	.-1712   	; 0x266 <joyStick_Tick>
 916:	85 de       	rcall	.-758    	; 0x622 <decodeTick>
 918:	c4 e6       	ldi	r28, 0x64	; 100
 91a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <TimerFlag>
 91e:	88 23       	and	r24, r24
 920:	e1 f3       	breq	.-8      	; 0x91a <main+0x76>
 922:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <TimerFlag>
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	c8 01       	movw	r24, r16
 92c:	a7 dc       	rcall	.-1714   	; 0x27c <irLoop>
 92e:	c1 50       	subi	r28, 0x01	; 1
 930:	a1 f7       	brne	.-24     	; 0x91a <main+0x76>
 932:	d6 cf       	rjmp	.-84     	; 0x8e0 <main+0x3c>

00000934 <__udivmodsi4>:
 934:	a1 e2       	ldi	r26, 0x21	; 33
 936:	1a 2e       	mov	r1, r26
 938:	aa 1b       	sub	r26, r26
 93a:	bb 1b       	sub	r27, r27
 93c:	fd 01       	movw	r30, r26
 93e:	0d c0       	rjmp	.+26     	; 0x95a <__udivmodsi4_ep>

00000940 <__udivmodsi4_loop>:
 940:	aa 1f       	adc	r26, r26
 942:	bb 1f       	adc	r27, r27
 944:	ee 1f       	adc	r30, r30
 946:	ff 1f       	adc	r31, r31
 948:	a2 17       	cp	r26, r18
 94a:	b3 07       	cpc	r27, r19
 94c:	e4 07       	cpc	r30, r20
 94e:	f5 07       	cpc	r31, r21
 950:	20 f0       	brcs	.+8      	; 0x95a <__udivmodsi4_ep>
 952:	a2 1b       	sub	r26, r18
 954:	b3 0b       	sbc	r27, r19
 956:	e4 0b       	sbc	r30, r20
 958:	f5 0b       	sbc	r31, r21

0000095a <__udivmodsi4_ep>:
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	1a 94       	dec	r1
 964:	69 f7       	brne	.-38     	; 0x940 <__udivmodsi4_loop>
 966:	60 95       	com	r22
 968:	70 95       	com	r23
 96a:	80 95       	com	r24
 96c:	90 95       	com	r25
 96e:	9b 01       	movw	r18, r22
 970:	ac 01       	movw	r20, r24
 972:	bd 01       	movw	r22, r26
 974:	cf 01       	movw	r24, r30
 976:	08 95       	ret

00000978 <_exit>:
 978:	f8 94       	cli

0000097a <__stop_program>:
 97a:	ff cf       	rjmp	.-2      	; 0x97a <__stop_program>
