
acast050_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000472  00800100  000009a4  00000a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002eb  00800572  00800572  00000eaa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d18  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adc  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0a  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  0000452c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075d  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000106a  00000000  00000000  00004f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	15 e0       	ldi	r17, 0x05	; 5
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 37       	cpi	r26, 0x72	; 114
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	a2 e7       	ldi	r26, 0x72	; 114
  b6:	b5 e0       	ldi	r27, 0x05	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 35       	cpi	r26, 0x5D	; 93
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	04 d4       	rcall	.+2056   	; 0x8cc <main>
  c4:	6d c4       	rjmp	.+2266   	; 0x9a0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	SendCommand_LCD(0x04);		//set lcd Temp coefficient
	SendCommand_LCD(0x14);		//set lcd bias mode
	SendCommand_LCD(0x20);		//set lcd control in basic mode set (H=0)
	SendCommand_LCD(0x0C);		//set display configuration control in normal mode (alternative: blank, all on, inverse video)
	//SendCommand_LCD(0x0D);	//set display configuration control in inverse mode
	LCD_clear();
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	41 98       	cbi	0x08, 1	; 8
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	40 9a       	sbi	0x08, 0	; 8
  f4:	00 00       	nop
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	8b b9       	out	0x0b, r24	; 11
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	00 00       	nop
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <_avr_timer_cntcurr>
 1ac:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <_avr_timer_cntcurr+0x1>
 1b0:	a0 93 75 05 	sts	0x0575, r26	; 0x800575 <_avr_timer_cntcurr+0x2>
 1b4:	b0 93 76 05 	sts	0x0576, r27	; 0x800576 <_avr_timer_cntcurr+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <_avr_timer_cntcurr>
 1d6:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <_avr_timer_cntcurr+0x1>
 1da:	a0 91 75 05 	lds	r26, 0x0575	; 0x800575 <_avr_timer_cntcurr+0x2>
 1de:	b0 91 76 05 	lds	r27, 0x0576	; 0x800576 <_avr_timer_cntcurr+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <_avr_timer_cntcurr>
 1ec:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 75 05 	sts	0x0575, r26	; 0x800575 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 76 05 	sts	0x0576, r27	; 0x800576 <_avr_timer_cntcurr+0x3>
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <TimerFlag>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <_avr_timer_cntcurr>
 21a:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <_avr_timer_cntcurr+0x1>
 21e:	a0 93 75 05 	sts	0x0575, r26	; 0x800575 <_avr_timer_cntcurr+0x2>
 222:	b0 93 76 05 	sts	0x0576, r27	; 0x800576 <_avr_timer_cntcurr+0x3>
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 248:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <_avr_timer_cntcurr>
 24c:	70 93 74 05 	sts	0x0574, r23	; 0x800574 <_avr_timer_cntcurr+0x1>
 250:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <_avr_timer_cntcurr+0x2>
 254:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <_avr_timer_cntcurr+0x3>
 258:	08 95       	ret

0000025a <ADC_init>:
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <irLoop>:
 266:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 26a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 26e:	28 17       	cp	r18, r24
 270:	39 07       	cpc	r19, r25
 272:	81 f1       	breq	.+96     	; 0x2d4 <irLoop+0x6e>
 274:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 278:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	81 f1       	breq	.+96     	; 0x2e2 <irLoop+0x7c>
 282:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 286:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	e8 e7       	ldi	r30, 0x78	; 120
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <irLoop+0x3e>
 294:	40 81       	ld	r20, Z
 296:	51 81       	ldd	r21, Z+1	; 0x01
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	28 3e       	cpi	r18, 0xE8	; 232
 29e:	6d ef       	ldi	r22, 0xFD	; 253
 2a0:	36 07       	cpc	r19, r22
 2a2:	a1 f1       	breq	.+104    	; 0x30c <irLoop+0xa6>
 2a4:	84 17       	cp	r24, r20
 2a6:	95 07       	cpc	r25, r21
 2a8:	a9 f7       	brne	.-22     	; 0x294 <irLoop+0x2e>
 2aa:	1d c0       	rjmp	.+58     	; 0x2e6 <irLoop+0x80>
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
 2b0:	40 81       	ld	r20, Z
 2b2:	51 81       	ldd	r21, Z+1	; 0x01
 2b4:	28 3e       	cpi	r18, 0xE8	; 232
 2b6:	bd ef       	ldi	r27, 0xFD	; 253
 2b8:	3b 07       	cpc	r19, r27
 2ba:	41 f1       	breq	.+80     	; 0x30c <irLoop+0xa6>
 2bc:	84 17       	cp	r24, r20
 2be:	95 07       	cpc	r25, r21
 2c0:	a9 f3       	breq	.-22     	; 0x2ac <irLoop+0x46>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	fb 01       	movw	r30, r22
 2c8:	e7 57       	subi	r30, 0x77	; 119
 2ca:	f8 4f       	sbci	r31, 0xF8	; 248
 2cc:	21 83       	std	Z+1, r18	; 0x01
 2ce:	af 5f       	subi	r26, 0xFF	; 255
 2d0:	a0 93 72 07 	sts	0x0772, r26	; 0x800772 <currentPulse>
 2d4:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <currentPulse>
 2d8:	84 36       	cpi	r24, 0x64	; 100
 2da:	c0 f0       	brcs	.+48     	; 0x30c <irLoop+0xa6>
 2dc:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <currentPulse>
 2e0:	08 95       	ret
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <currentPulse>
 2ea:	6a 2f       	mov	r22, r26
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	fb 01       	movw	r30, r22
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	e7 57       	subi	r30, 0x77	; 119
 2f6:	f8 4f       	sbci	r31, 0xF8	; 248
 2f8:	20 83       	st	Z, r18
 2fa:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2fe:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	e8 e7       	ldi	r30, 0x78	; 120
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	d8 cf       	rjmp	.-80     	; 0x2bc <irLoop+0x56>
 30c:	08 95       	ret

0000030e <SendData_LCD>:
 30e:	44 9a       	sbi	0x08, 4	; 8
 310:	45 9a       	sbi	0x08, 5	; 8
 312:	45 98       	cbi	0x08, 5	; 8
 314:	27 e0       	ldi	r18, 0x07	; 7
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	ac 01       	movw	r20, r24
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <SendData_LCD+0x14>
 31e:	56 95       	lsr	r21
 320:	47 95       	ror	r20
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <SendData_LCD+0x10>
 326:	40 ff       	sbrs	r20, 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <SendData_LCD+0x20>
 32a:	43 9a       	sbi	0x08, 3	; 8
 32c:	01 c0       	rjmp	.+2      	; 0x330 <SendData_LCD+0x22>
 32e:	43 98       	cbi	0x08, 3	; 8
 330:	42 9a       	sbi	0x08, 2	; 8
 332:	42 98       	cbi	0x08, 2	; 8
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
 338:	78 f7       	brcc	.-34     	; 0x318 <SendData_LCD+0xa>
 33a:	45 9a       	sbi	0x08, 5	; 8
 33c:	08 95       	ret

0000033e <SendCommand_LCD>:
 33e:	bc 01       	movw	r22, r24
 340:	44 9a       	sbi	0x08, 4	; 8
 342:	45 9a       	sbi	0x08, 5	; 8
 344:	88 b1       	in	r24, 0x08	; 8
 346:	80 7c       	andi	r24, 0xC0	; 192
 348:	88 b9       	out	0x08, r24	; 8
 34a:	88 b1       	in	r24, 0x08	; 8
 34c:	80 7e       	andi	r24, 0xE0	; 224
 34e:	88 b9       	out	0x08, r24	; 8
 350:	27 e0       	ldi	r18, 0x07	; 7
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	ab 01       	movw	r20, r22
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <SendCommand_LCD+0x20>
 35a:	56 95       	lsr	r21
 35c:	47 95       	ror	r20
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <SendCommand_LCD+0x1c>
 362:	40 ff       	sbrs	r20, 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <SendCommand_LCD+0x2c>
 366:	43 9a       	sbi	0x08, 3	; 8
 368:	03 c0       	rjmp	.+6      	; 0x370 <SendCommand_LCD+0x32>
 36a:	98 b1       	in	r25, 0x08	; 8
 36c:	90 7f       	andi	r25, 0xF0	; 240
 36e:	98 b9       	out	0x08, r25	; 8
 370:	42 9a       	sbi	0x08, 2	; 8
 372:	98 b1       	in	r25, 0x08	; 8
 374:	98 7f       	andi	r25, 0xF8	; 248
 376:	98 b9       	out	0x08, r25	; 8
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	31 09       	sbc	r19, r1
 37c:	58 f7       	brcc	.-42     	; 0x354 <SendCommand_LCD+0x16>
 37e:	45 9a       	sbi	0x08, 5	; 8
 380:	08 95       	ret

00000382 <LCD_5110_init>:
 382:	87 b1       	in	r24, 0x07	; 7
 384:	8c 67       	ori	r24, 0x7C	; 124
 386:	87 b9       	out	0x07, r24	; 7
 388:	46 9a       	sbi	0x08, 6	; 8
 38a:	42 9a       	sbi	0x08, 2	; 8
 38c:	85 ea       	ldi	r24, 0xA5	; 165
 38e:	9e e0       	ldi	r25, 0x0E	; 14
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_5110_init+0xe>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_5110_init+0x14>
 396:	00 00       	nop
 398:	47 9a       	sbi	0x08, 7	; 8
 39a:	8f e7       	ldi	r24, 0x7F	; 127
 39c:	9e e3       	ldi	r25, 0x3E	; 62
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_5110_init+0x1c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_5110_init+0x22>
 3a4:	00 00       	nop
 3a6:	46 9a       	sbi	0x08, 6	; 8
 3a8:	88 b1       	in	r24, 0x08	; 8
 3aa:	80 6c       	ori	r24, 0xC0	; 192
 3ac:	88 b9       	out	0x08, r24	; 8
 3ae:	81 e2       	ldi	r24, 0x21	; 33
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	c5 df       	rcall	.-118    	; 0x33e <SendCommand_LCD>
 3b4:	8e eb       	ldi	r24, 0xBE	; 190
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	c2 df       	rcall	.-124    	; 0x33e <SendCommand_LCD>
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	bf df       	rcall	.-130    	; 0x33e <SendCommand_LCD>
 3c0:	83 e1       	ldi	r24, 0x13	; 19
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	bc df       	rcall	.-136    	; 0x33e <SendCommand_LCD>
 3c6:	80 e2       	ldi	r24, 0x20	; 32
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	b9 df       	rcall	.-142    	; 0x33e <SendCommand_LCD>
 3cc:	8c e0       	ldi	r24, 0x0C	; 12
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	b6 cf       	rjmp	.-148    	; 0x33e <SendCommand_LCD>
 3d2:	08 95       	ret

000003d4 <LCD_gotoXY>:
 3d4:	cf 93       	push	r28
 3d6:	c6 2f       	mov	r28, r22
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	b0 df       	rcall	.-160    	; 0x33e <SendCommand_LCD>
 3de:	8c 2f       	mov	r24, r28
 3e0:	80 64       	ori	r24, 0x40	; 64
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	ac df       	rcall	.-168    	; 0x33e <SendCommand_LCD>
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <LCD_clear>:
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	08 e0       	ldi	r16, 0x08	; 8
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	88 df       	rcall	.-240    	; 0x30e <SendData_LCD>
 3fe:	21 97       	sbiw	r28, 0x01	; 1
 400:	d9 f7       	brne	.-10     	; 0x3f8 <LCD_clear+0xe>
 402:	01 50       	subi	r16, 0x01	; 1
 404:	11 09       	sbc	r17, r1
 406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	ca e5       	ldi	r28, 0x5A	; 90
 40a:	d0 e0       	ldi	r29, 0x00	; 0
 40c:	f5 cf       	rjmp	.-22     	; 0x3f8 <LCD_clear+0xe>
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	e0 df       	rcall	.-64     	; 0x3d4 <LCD_gotoXY>
 414:	c8 e7       	ldi	r28, 0x78	; 120
 416:	d5 e0       	ldi	r29, 0x05	; 5
 418:	00 e7       	ldi	r16, 0x70	; 112
 41a:	17 e0       	ldi	r17, 0x07	; 7
 41c:	19 92       	st	Y+, r1
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	75 df       	rcall	.-278    	; 0x30e <SendData_LCD>
 424:	c0 17       	cp	r28, r16
 426:	d1 07       	cpc	r29, r17
 428:	c9 f7       	brne	.-14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <LCD_Update>:
void LCD_gotoXY (unsigned char x, unsigned char y){
    SendCommand_LCD(0x80 | x);   //column
	SendCommand_LCD(0x40 | y);   //row
}

void LCD_Update (void){
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	c8 e7       	ldi	r28, 0x78	; 120
 43e:	d5 e0       	ldi	r29, 0x05	; 5
 440:	00 e7       	ldi	r16, 0x70	; 112
 442:	17 e0       	ldi	r17, 0x07	; 7
	for (short i = 0; i < 504; i++){
		SendData_LCD(LCDBuffer[i]);
 444:	89 91       	ld	r24, Y+
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	62 df       	rcall	.-316    	; 0x30e <SendData_LCD>
    SendCommand_LCD(0x80 | x);   //column
	SendCommand_LCD(0x40 | y);   //row
}

void LCD_Update (void){
	for (short i = 0; i < 504; i++){
 44a:	c0 17       	cp	r28, r16
 44c:	d1 07       	cpc	r29, r17
 44e:	d1 f7       	brne	.-12     	; 0x444 <LCD_Update+0x10>
		SendData_LCD(LCDBuffer[i]);
	}
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <joyStick_Tick>:
task tasks[2];
const unsigned char taskNum = 2;

enum JS_STATES {JS_init, up, down, maintainD, maintainU} JS_STATE;
void joyStick_Tick(){
	unsigned char tempval = ~PINB & 0x03;
 45a:	83 b1       	in	r24, 0x03	; 3
 45c:	80 95       	com	r24
 45e:	83 70       	andi	r24, 0x03	; 3
	if(tempval == 1){
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	61 f4       	brne	.+24     	; 0x47c <joyStick_Tick+0x22>
 464:	e8 e7       	ldi	r30, 0x78	; 120
 466:	f5 e0       	ldi	r31, 0x05	; 5
 468:	21 e6       	ldi	r18, 0x61	; 97
 46a:	37 e0       	ldi	r19, 0x07	; 7
		//LCD_DisplayString(1, "Updating..");
		unsigned short i = 0;
		for(i = 0; i< 489; i++){
			LCDBuffer[i] = LCDBuffer[i] + 1;
 46c:	80 81       	ld	r24, Z
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	81 93       	st	Z+, r24
void joyStick_Tick(){
	unsigned char tempval = ~PINB & 0x03;
	if(tempval == 1){
		//LCD_DisplayString(1, "Updating..");
		unsigned short i = 0;
		for(i = 0; i< 489; i++){
 472:	e2 17       	cp	r30, r18
 474:	f3 07       	cpc	r31, r19
			LCDBuffer[i] = LCDBuffer[i] + 1;
		}
		LCD_Update();
 476:	d1 f7       	brne	.-12     	; 0x46c <joyStick_Tick+0x12>
 478:	dd cf       	rjmp	.-70     	; 0x434 <LCD_Update>
	}
	else if(tempval == 2){
 47a:	08 95       	ret
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	59 f4       	brne	.+22     	; 0x496 <joyStick_Tick+0x3c>
 480:	e8 e7       	ldi	r30, 0x78	; 120
 482:	f5 e0       	ldi	r31, 0x05	; 5
 484:	21 e6       	ldi	r18, 0x61	; 97
		//LCD_DisplayString(1, "Updating..");
		unsigned short i = 0;
		for(i = 0; i< 489; i++){
			LCDBuffer[i] = LCDBuffer[i] - 1;
 486:	37 e0       	ldi	r19, 0x07	; 7
 488:	80 81       	ld	r24, Z
 48a:	81 50       	subi	r24, 0x01	; 1
		LCD_Update();
	}
	else if(tempval == 2){
		//LCD_DisplayString(1, "Updating..");
		unsigned short i = 0;
		for(i = 0; i< 489; i++){
 48c:	81 93       	st	Z+, r24
 48e:	2e 17       	cp	r18, r30
			LCDBuffer[i] = LCDBuffer[i] - 1;
		}
		LCD_Update();
 490:	3f 07       	cpc	r19, r31
 492:	d1 f7       	brne	.-12     	; 0x488 <joyStick_Tick+0x2e>
 494:	cf cf       	rjmp	.-98     	; 0x434 <LCD_Update>
 496:	08 95       	ret

00000498 <ReplaceBitmap>:
	for (short i = 0; i < 504; i++){
		SendData_LCD(LCDBuffer[i]);
	}
}

void ReplaceBitmap (char ReplacementBitmap[]){	//replaces the bitmap by filling the LCDBuffer with the ReplacementBitmap bytes, LCD_Update required after this function
 498:	dc 01       	movw	r26, r24
 49a:	e8 e7       	ldi	r30, 0x78	; 120
 49c:	f5 e0       	ldi	r31, 0x05	; 5
 49e:	20 e7       	ldi	r18, 0x70	; 112
 4a0:	37 e0       	ldi	r19, 0x07	; 7
	for (short i = 0; i < 504; i++){
		LCDBuffer[i] = ReplacementBitmap[i];
 4a2:	8d 91       	ld	r24, X+
 4a4:	81 93       	st	Z+, r24
		SendData_LCD(LCDBuffer[i]);
	}
}

void ReplaceBitmap (char ReplacementBitmap[]){	//replaces the bitmap by filling the LCDBuffer with the ReplacementBitmap bytes, LCD_Update required after this function
	for (short i = 0; i < 504; i++){
 4a6:	e2 17       	cp	r30, r18
 4a8:	f3 07       	cpc	r31, r19
 4aa:	d9 f7       	brne	.-10     	; 0x4a2 <ReplaceBitmap+0xa>
		LCDBuffer[i] = ReplacementBitmap[i];
	}
}
 4ac:	08 95       	ret

000004ae <SetPixel>:

void SetPixel (unsigned char xp, unsigned char yp, char bw){
	int YBit = yp % 8;				//determine which bit is affected by using modulo
 4ae:	26 2f       	mov	r18, r22
 4b0:	27 70       	andi	r18, 0x07	; 7
	int YByte = ((yp / 8) * 84) + xp;		//determine which byte is affected
 4b2:	66 95       	lsr	r22
 4b4:	66 95       	lsr	r22
 4b6:	66 95       	lsr	r22
 4b8:	e8 2f       	mov	r30, r24
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	84 e5       	ldi	r24, 0x54	; 84
 4be:	68 9f       	mul	r22, r24
 4c0:	e0 0d       	add	r30, r0
 4c2:	f1 1d       	adc	r31, r1
 4c4:	11 24       	eor	r1, r1
	
	if (bw == Black){				//draw a black pixel
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	69 f4       	brne	.+26     	; 0x4e4 <SetPixel+0x36>
		LCDBuffer[YByte] |= (1<<YBit);
 4ca:	e8 58       	subi	r30, 0x88	; 136
 4cc:	fa 4f       	sbci	r31, 0xFA	; 250
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <SetPixel+0x2a>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	2a 95       	dec	r18
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <SetPixel+0x26>
 4dc:	90 81       	ld	r25, Z
 4de:	89 2b       	or	r24, r25
 4e0:	80 83       	st	Z, r24
 4e2:	08 95       	ret
	}
	else{
		LCDBuffer[YByte] &= (~(1<<YBit));	//draw a white pixel
 4e4:	e8 58       	subi	r30, 0x88	; 136
 4e6:	fa 4f       	sbci	r31, 0xFA	; 250
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <SetPixel+0x44>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	2a 95       	dec	r18
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <SetPixel+0x40>
 4f6:	80 95       	com	r24
 4f8:	90 81       	ld	r25, Z
 4fa:	89 23       	and	r24, r25
 4fc:	80 83       	st	Z, r24
 4fe:	08 95       	ret

00000500 <DrawRectangle>:
	}
}

void DrawRectangle (int x1,int y1, int x2, int y2, char bw, char fill)	// LCD_Update required after this function
{
 500:	6f 92       	push	r6
 502:	7f 92       	push	r7
 504:	8f 92       	push	r8
 506:	9f 92       	push	r9
 508:	af 92       	push	r10
 50a:	bf 92       	push	r11
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	99 23       	and	r25, r25
 51e:	14 f4       	brge	.+4      	; 0x524 <DrawRectangle+0x24>
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	6c 01       	movw	r12, r24
 526:	84 e5       	ldi	r24, 0x54	; 84
 528:	c8 16       	cp	r12, r24
 52a:	d1 04       	cpc	r13, r1
 52c:	2c f0       	brlt	.+10     	; 0x538 <DrawRectangle+0x38>
 52e:	0f 2e       	mov	r0, r31
 530:	f3 e5       	ldi	r31, 0x53	; 83
 532:	cf 2e       	mov	r12, r31
 534:	d1 2c       	mov	r13, r1
 536:	f0 2d       	mov	r31, r0
 538:	84 2e       	mov	r8, r20
 53a:	95 2e       	mov	r9, r21
 53c:	99 20       	and	r9, r9
 53e:	14 f4       	brge	.+4      	; 0x544 <DrawRectangle+0x44>
 540:	81 2c       	mov	r8, r1
 542:	91 2c       	mov	r9, r1
 544:	84 e5       	ldi	r24, 0x54	; 84
 546:	88 16       	cp	r8, r24
 548:	91 04       	cpc	r9, r1
 54a:	2c f0       	brlt	.+10     	; 0x556 <DrawRectangle+0x56>
 54c:	0f 2e       	mov	r0, r31
 54e:	f3 e5       	ldi	r31, 0x53	; 83
 550:	8f 2e       	mov	r8, r31
 552:	91 2c       	mov	r9, r1
 554:	f0 2d       	mov	r31, r0
 556:	a6 2e       	mov	r10, r22
 558:	b7 2e       	mov	r11, r23
 55a:	bb 20       	and	r11, r11
 55c:	14 f4       	brge	.+4      	; 0x562 <DrawRectangle+0x62>
 55e:	a1 2c       	mov	r10, r1
 560:	b1 2c       	mov	r11, r1
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	a8 16       	cp	r10, r24
 566:	b1 04       	cpc	r11, r1
 568:	2c f0       	brlt	.+10     	; 0x574 <DrawRectangle+0x74>
 56a:	0f 2e       	mov	r0, r31
 56c:	ff e2       	ldi	r31, 0x2F	; 47
 56e:	af 2e       	mov	r10, r31
 570:	b1 2c       	mov	r11, r1
 572:	f0 2d       	mov	r31, r0
 574:	c2 2f       	mov	r28, r18
 576:	d3 2f       	mov	r29, r19
 578:	dd 23       	and	r29, r29
 57a:	14 f4       	brge	.+4      	; 0x580 <DrawRectangle+0x80>
 57c:	c0 e0       	ldi	r28, 0x00	; 0
 57e:	d0 e0       	ldi	r29, 0x00	; 0
 580:	c0 33       	cpi	r28, 0x30	; 48
 582:	d1 05       	cpc	r29, r1
 584:	14 f0       	brlt	.+4      	; 0x58a <DrawRectangle+0x8a>
 586:	cf e2       	ldi	r28, 0x2F	; 47
 588:	d0 e0       	ldi	r29, 0x00	; 0
	{
		RectangleStartByte +=84;
		LCDBuffer[RectangleStartByte]|=0xFF;
		LCDBuffer[RectangleStartByte+Rectangle_X_Delta]|=0xFF;
	}*/
	if (fill == NotFilled)				//draw a not filled rectangle
 58a:	ee 20       	and	r14, r14
 58c:	61 f0       	breq	.+24     	; 0x5a6 <DrawRectangle+0xa6>
		}
	}
	
	else								//draw a filled rectangle by drawing a vertical line from x1 posn to x2 posn
	{
		for (int j=0; j<(x2-x1); j++)
 58e:	8c 18       	sub	r8, r12
 590:	9d 08       	sbc	r9, r13
 592:	18 14       	cp	r1, r8
 594:	19 04       	cpc	r1, r9
 596:	0c f0       	brlt	.+2      	; 0x59a <DrawRectangle+0x9a>
 598:	49 c0       	rjmp	.+146    	; 0x62c <DrawRectangle+0x12c>
 59a:	e1 2c       	mov	r14, r1
 59c:	f1 2c       	mov	r15, r1
			{
				for (int i=0; i<=(y2-y1); i++)
 59e:	3e 01       	movw	r6, r28
 5a0:	6a 18       	sub	r6, r10
 5a2:	7b 08       	sbc	r7, r11
 5a4:	3d c0       	rjmp	.+122    	; 0x620 <DrawRectangle+0x120>
		LCDBuffer[RectangleStartByte]|=0xFF;
		LCDBuffer[RectangleStartByte+Rectangle_X_Delta]|=0xFF;
	}*/
	if (fill == NotFilled)				//draw a not filled rectangle
	{
		for (int i=0; i<(x2-x1); i++)
 5a6:	74 01       	movw	r14, r8
 5a8:	ec 18       	sub	r14, r12
 5aa:	fd 08       	sbc	r15, r13
 5ac:	1e 14       	cp	r1, r14
 5ae:	1f 04       	cpc	r1, r15
 5b0:	94 f4       	brge	.+36     	; 0x5d6 <DrawRectangle+0xd6>
 5b2:	1c 2d       	mov	r17, r12
 5b4:	61 2c       	mov	r6, r1
 5b6:	71 2c       	mov	r7, r1
		{
			SetPixel(i+x1,y1,bw);		// upper line
 5b8:	40 2f       	mov	r20, r16
 5ba:	6a 2d       	mov	r22, r10
 5bc:	81 2f       	mov	r24, r17
 5be:	77 df       	rcall	.-274    	; 0x4ae <SetPixel>
			SetPixel(i+x1,y2,bw);		// lower line
 5c0:	40 2f       	mov	r20, r16
 5c2:	6c 2f       	mov	r22, r28
 5c4:	81 2f       	mov	r24, r17
 5c6:	73 df       	rcall	.-282    	; 0x4ae <SetPixel>
		LCDBuffer[RectangleStartByte]|=0xFF;
		LCDBuffer[RectangleStartByte+Rectangle_X_Delta]|=0xFF;
	}*/
	if (fill == NotFilled)				//draw a not filled rectangle
	{
		for (int i=0; i<(x2-x1); i++)
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	68 1a       	sub	r6, r24
 5cc:	78 0a       	sbc	r7, r24
 5ce:	1f 5f       	subi	r17, 0xFF	; 255
 5d0:	6e 14       	cp	r6, r14
 5d2:	7f 04       	cpc	r7, r15
 5d4:	89 f7       	brne	.-30     	; 0x5b8 <DrawRectangle+0xb8>
		{
			SetPixel(i+x1,y1,bw);		// upper line
			SetPixel(i+x1,y2,bw);		// lower line
		}
		
		for (int i=0; i<=(y2-y1); i++)
 5d6:	ca 19       	sub	r28, r10
 5d8:	db 09       	sbc	r29, r11
 5da:	42 f1       	brmi	.+80     	; 0x62c <DrawRectangle+0x12c>
 5dc:	e1 2c       	mov	r14, r1
 5de:	f1 2c       	mov	r15, r1
		{
			SetPixel(x1,i+y1,bw);		// left line
 5e0:	40 2f       	mov	r20, r16
 5e2:	6a 2d       	mov	r22, r10
 5e4:	8c 2d       	mov	r24, r12
			SetPixel(x2,i+y1,bw);		// right line
 5e6:	63 df       	rcall	.-314    	; 0x4ae <SetPixel>
 5e8:	40 2f       	mov	r20, r16
 5ea:	6a 2d       	mov	r22, r10
 5ec:	88 2d       	mov	r24, r8
		{
			SetPixel(i+x1,y1,bw);		// upper line
			SetPixel(i+x1,y2,bw);		// lower line
		}
		
		for (int i=0; i<=(y2-y1); i++)
 5ee:	5f df       	rcall	.-322    	; 0x4ae <SetPixel>
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	e8 1a       	sub	r14, r24
 5f4:	f8 0a       	sbc	r15, r24
 5f6:	a3 94       	inc	r10
 5f8:	ce 15       	cp	r28, r14
 5fa:	df 05       	cpc	r29, r15
	{
		for (int j=0; j<(x2-x1); j++)
			{
				for (int i=0; i<=(y2-y1); i++)
				{
					SetPixel(j+x1,i+y1,bw);		
 5fc:	8c f7       	brge	.-30     	; 0x5e0 <DrawRectangle+0xe0>
 5fe:	16 c0       	rjmp	.+44     	; 0x62c <DrawRectangle+0x12c>
 600:	40 2f       	mov	r20, r16
 602:	6d 2d       	mov	r22, r13
 604:	8c 2d       	mov	r24, r12
	
	else								//draw a filled rectangle by drawing a vertical line from x1 posn to x2 posn
	{
		for (int j=0; j<(x2-x1); j++)
			{
				for (int i=0; i<=(y2-y1); i++)
 606:	53 df       	rcall	.-346    	; 0x4ae <SetPixel>
 608:	21 96       	adiw	r28, 0x01	; 1
 60a:	d3 94       	inc	r13
 60c:	6c 16       	cp	r6, r28
 60e:	7d 06       	cpc	r7, r29
		}
	}
	
	else								//draw a filled rectangle by drawing a vertical line from x1 posn to x2 posn
	{
		for (int j=0; j<(x2-x1); j++)
 610:	bc f7       	brge	.-18     	; 0x600 <DrawRectangle+0x100>
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	e8 1a       	sub	r14, r24
 616:	f8 0a       	sbc	r15, r24
 618:	c3 94       	inc	r12
 61a:	e8 14       	cp	r14, r8
 61c:	f9 04       	cpc	r15, r9
			{
				for (int i=0; i<=(y2-y1); i++)
 61e:	31 f0       	breq	.+12     	; 0x62c <DrawRectangle+0x12c>
 620:	77 20       	and	r7, r7
 622:	bc f3       	brlt	.-18     	; 0x612 <DrawRectangle+0x112>
 624:	da 2c       	mov	r13, r10
 626:	c0 e0       	ldi	r28, 0x00	; 0
 628:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
	}
	
		
 62a:	ea cf       	rjmp	.-44     	; 0x600 <DrawRectangle+0x100>
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	df 90       	pop	r13
 63a:	cf 90       	pop	r12
 63c:	bf 90       	pop	r11
 63e:	af 90       	pop	r10
 640:	9f 90       	pop	r9
 642:	8f 90       	pop	r8
 644:	7f 90       	pop	r7
 646:	6f 90       	pop	r6
 648:	08 95       	ret

0000064a <decodeTick>:
	if(currentPulse >= 100){
		currentPulse = 0;
	}
}

void decodeTick(){
 64a:	ef 92       	push	r14
 64c:	0f 93       	push	r16
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
	for(i = 0; i < currentPulse; i++){
 64e:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <currentPulse>
 652:	22 23       	and	r18, r18
 654:	b1 f0       	breq	.+44     	; 0x682 <decodeTick+0x38>
 656:	e9 e8       	ldi	r30, 0x89	; 137
 658:	f7 e0       	ldi	r31, 0x07	; 7
 65a:	4f ef       	ldi	r20, 0xFF	; 255
 65c:	42 0f       	add	r20, r18
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	45 57       	subi	r20, 0x75	; 117
 666:	58 4f       	sbci	r21, 0xF8	; 248
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	cb 01       	movw	r24, r22
		averageHigh += pulses[i][0];
 66e:	30 81       	ld	r19, Z
 670:	63 0f       	add	r22, r19
 672:	71 1d       	adc	r23, r1
 674:	81 1d       	adc	r24, r1
 676:	91 1d       	adc	r25, r1
 678:	32 96       	adiw	r30, 0x02	; 2
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
	for(i = 0; i < currentPulse; i++){
 67a:	e4 17       	cp	r30, r20
 67c:	f5 07       	cpc	r31, r21
 67e:	b9 f7       	brne	.-18     	; 0x66e <decodeTick+0x24>
 680:	03 c0       	rjmp	.+6      	; 0x688 <decodeTick+0x3e>
	for(i = 17; i <33; i++){
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	cb 01       	movw	r24, r22
	for(i = 0; i < currentPulse; i++){
		averageHigh += pulses[i][0];
	}
	averageHigh = averageHigh / currentPulse;
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	66 d1       	rcall	.+716    	; 0x95c <__udivmodsi4>
	//LCD_Cursor(1);
	//LCD_WriteData(averageHigh + ' ');

	if(averageHigh > 45 && averageHigh < 57 ){
 690:	da 01       	movw	r26, r20
 692:	c9 01       	movw	r24, r18
 694:	8e 97       	sbiw	r24, 0x2e	; 46
 696:	a1 09       	sbc	r26, r1
 698:	b1 09       	sbc	r27, r1
 69a:	0b 97       	sbiw	r24, 0x0b	; 11
 69c:	a1 05       	cpc	r26, r1
 69e:	b1 05       	cpc	r27, r1
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <decodeTick+0x5a>
 6a2:	68 c0       	rjmp	.+208    	; 0x774 <decodeTick+0x12a>
		LCD_DisplayString(1, "Power!");
 6a4:	64 ef       	ldi	r22, 0xF4	; 244
 6a6:	74 e0       	ldi	r23, 0x04	; 4
 6a8:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Cursor(17);
 6aa:	4d dd       	rcall	.-1382   	; 0x146 <LCD_DisplayString>
 6ac:	81 e1       	ldi	r24, 0x11	; 17
		LCD_WriteData(0x0);
 6ae:	2b dd       	rcall	.-1450   	; 0x106 <LCD_Cursor>
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	40 dd       	rcall	.-1408   	; 0x134 <LCD_WriteData>
		if(powerBool == 0){
 6b4:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <__data_end>
 6b8:	81 11       	cpse	r24, r1
 6ba:	05 c1       	rjmp	.+522    	; 0x8c6 <decodeTick+0x27c>
			unsigned char temp = PORTC & 0x80;
			if(temp){
				PORTC = PORTC & 0x7F;
				on = 0;
 6bc:	47 9b       	sbis	0x08, 7	; 8
 6be:	1a c0       	rjmp	.+52     	; 0x6f4 <decodeTick+0xaa>
				LCD_clear();
 6c0:	47 98       	cbi	0x08, 7	; 8
				LCD_Update();
 6c2:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <on>
				LCD_DisplayString(1, "Goodbye");
 6c6:	91 de       	rcall	.-734    	; 0x3ea <LCD_clear>
 6c8:	b5 de       	rcall	.-662    	; 0x434 <LCD_Update>
 6ca:	6b ef       	ldi	r22, 0xFB	; 251
				LCD_Cursor(17);
 6cc:	74 e0       	ldi	r23, 0x04	; 4
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	3a dd       	rcall	.-1420   	; 0x146 <LCD_DisplayString>
				LCD_WriteData(0x0);
 6d2:	81 e1       	ldi	r24, 0x11	; 17
 6d4:	18 dd       	rcall	.-1488   	; 0x106 <LCD_Cursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	2d dd       	rcall	.-1446   	; 0x134 <LCD_WriteData>
 6da:	2f e7       	ldi	r18, 0x7F	; 127
 6dc:	84 e8       	ldi	r24, 0x84	; 132
 6de:	9e e1       	ldi	r25, 0x1E	; 30
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	80 40       	sbci	r24, 0x00	; 0
 6e4:	90 40       	sbci	r25, 0x00	; 0
				_delay_ms(10000);
				LCD_ClearScreen();
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <decodeTick+0x96>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <decodeTick+0xa0>
				powerBool = 0;
 6ea:	00 00       	nop
 6ec:	09 dd       	rcall	.-1518   	; 0x100 <LCD_ClearScreen>
				return;
			}
			else{
				PORTC = PORTC | 0x80;
 6ee:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <__data_end>
 6f2:	e9 c0       	rjmp	.+466    	; 0x8c6 <decodeTick+0x27c>
 6f4:	47 9a       	sbi	0x08, 7	; 8
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <on>
 6fc:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <currChannel>
 700:	81 11       	cpse	r24, r1
 702:	0e c0       	rjmp	.+28     	; 0x720 <decodeTick+0xd6>
 704:	8c ef       	ldi	r24, 0xFC	; 252
 706:	92 e0       	ldi	r25, 0x02	; 2
 708:	c7 de       	rcall	.-626    	; 0x498 <ReplaceBitmap>
 70a:	94 de       	rcall	.-728    	; 0x434 <LCD_Update>
 70c:	2f e1       	ldi	r18, 0x1F	; 31
 70e:	81 ea       	ldi	r24, 0xA1	; 161
 710:	97 e0       	ldi	r25, 0x07	; 7
 712:	21 50       	subi	r18, 0x01	; 1
 714:	80 40       	sbci	r24, 0x00	; 0
 716:	90 40       	sbci	r25, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <decodeTick+0xc8>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <decodeTick+0xd2>
 71c:	00 00       	nop
 71e:	26 c0       	rjmp	.+76     	; 0x76c <decodeTick+0x122>
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	71 f4       	brne	.+28     	; 0x740 <decodeTick+0xf6>
 724:	84 e0       	ldi	r24, 0x04	; 4
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	b7 de       	rcall	.-658    	; 0x498 <ReplaceBitmap>
 72a:	84 de       	rcall	.-760    	; 0x434 <LCD_Update>
 72c:	2f e1       	ldi	r18, 0x1F	; 31
 72e:	81 ea       	ldi	r24, 0xA1	; 161
 730:	97 e0       	ldi	r25, 0x07	; 7
 732:	21 50       	subi	r18, 0x01	; 1
 734:	80 40       	sbci	r24, 0x00	; 0
 736:	90 40       	sbci	r25, 0x00	; 0
 738:	e1 f7       	brne	.-8      	; 0x732 <decodeTick+0xe8>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <decodeTick+0xf2>
 73c:	00 00       	nop
 73e:	16 c0       	rjmp	.+44     	; 0x76c <decodeTick+0x122>
 740:	54 de       	rcall	.-856    	; 0x3ea <LCD_clear>
 742:	e1 2c       	mov	r14, r1
 744:	01 e0       	ldi	r16, 0x01	; 1
 746:	28 e2       	ldi	r18, 0x28	; 40
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	4f e4       	ldi	r20, 0x4F	; 79
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	65 e0       	ldi	r22, 0x05	; 5
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	85 e0       	ldi	r24, 0x05	; 5
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	d4 de       	rcall	.-600    	; 0x500 <DrawRectangle>
 758:	6d de       	rcall	.-806    	; 0x434 <LCD_Update>
 75a:	2f e1       	ldi	r18, 0x1F	; 31
 75c:	81 ea       	ldi	r24, 0xA1	; 161
 75e:	97 e0       	ldi	r25, 0x07	; 7
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <decodeTick+0x116>
 768:	00 c0       	rjmp	.+0      	; 0x76a <decodeTick+0x120>
 76a:	00 00       	nop
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <__data_end>
 772:	a9 c0       	rjmp	.+338    	; 0x8c6 <decodeTick+0x27c>
 774:	da 01       	movw	r26, r20
 776:	c9 01       	movw	r24, r18
 778:	8e 54       	subi	r24, 0x4E	; 78
 77a:	91 09       	sbc	r25, r1
 77c:	a1 09       	sbc	r26, r1
 77e:	b1 09       	sbc	r27, r1
 780:	06 97       	sbiw	r24, 0x06	; 6
 782:	a1 05       	cpc	r26, r1
 784:	b1 05       	cpc	r27, r1
 786:	08 f0       	brcs	.+2      	; 0x78a <decodeTick+0x140>
 788:	4b c0       	rjmp	.+150    	; 0x820 <decodeTick+0x1d6>
 78a:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <on>
 78e:	88 23       	and	r24, r24
 790:	09 f4       	brne	.+2      	; 0x794 <decodeTick+0x14a>
 792:	99 c0       	rjmp	.+306    	; 0x8c6 <decodeTick+0x27c>
 794:	63 e0       	ldi	r22, 0x03	; 3
 796:	75 e0       	ldi	r23, 0x05	; 5
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	d5 dc       	rcall	.-1622   	; 0x146 <LCD_DisplayString>
 79c:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <__data_end>
 7a0:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <currChannel>
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	18 f4       	brcc	.+6      	; 0x7ae <decodeTick+0x164>
 7a8:	8f 5f       	subi	r24, 0xFF	; 255
 7aa:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <currChannel>
 7ae:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <currChannel>
 7b2:	81 11       	cpse	r24, r1
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <decodeTick+0x188>
 7b6:	8c ef       	ldi	r24, 0xFC	; 252
 7b8:	92 e0       	ldi	r25, 0x02	; 2
 7ba:	6e de       	rcall	.-804    	; 0x498 <ReplaceBitmap>
 7bc:	3b de       	rcall	.-906    	; 0x434 <LCD_Update>
 7be:	2f e1       	ldi	r18, 0x1F	; 31
 7c0:	81 ea       	ldi	r24, 0xA1	; 161
 7c2:	97 e0       	ldi	r25, 0x07	; 7
 7c4:	21 50       	subi	r18, 0x01	; 1
 7c6:	80 40       	sbci	r24, 0x00	; 0
 7c8:	90 40       	sbci	r25, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <decodeTick+0x17a>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <decodeTick+0x184>
 7ce:	00 00       	nop
 7d0:	7a c0       	rjmp	.+244    	; 0x8c6 <decodeTick+0x27c>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	71 f4       	brne	.+28     	; 0x7f2 <decodeTick+0x1a8>
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	5e de       	rcall	.-836    	; 0x498 <ReplaceBitmap>
 7dc:	2b de       	rcall	.-938    	; 0x434 <LCD_Update>
 7de:	2f e1       	ldi	r18, 0x1F	; 31
 7e0:	81 ea       	ldi	r24, 0xA1	; 161
 7e2:	97 e0       	ldi	r25, 0x07	; 7
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	80 40       	sbci	r24, 0x00	; 0
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <decodeTick+0x19a>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <decodeTick+0x1a4>
 7ee:	00 00       	nop
 7f0:	6a c0       	rjmp	.+212    	; 0x8c6 <decodeTick+0x27c>
 7f2:	fb dd       	rcall	.-1034   	; 0x3ea <LCD_clear>
 7f4:	e1 2c       	mov	r14, r1
 7f6:	01 e0       	ldi	r16, 0x01	; 1
 7f8:	28 e2       	ldi	r18, 0x28	; 40
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	4f e4       	ldi	r20, 0x4F	; 79
 7fe:	50 e0       	ldi	r21, 0x00	; 0
 800:	65 e0       	ldi	r22, 0x05	; 5
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	85 e0       	ldi	r24, 0x05	; 5
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	7b de       	rcall	.-778    	; 0x500 <DrawRectangle>
 80a:	14 de       	rcall	.-984    	; 0x434 <LCD_Update>
 80c:	2f e1       	ldi	r18, 0x1F	; 31
 80e:	81 ea       	ldi	r24, 0xA1	; 161
 810:	97 e0       	ldi	r25, 0x07	; 7
 812:	21 50       	subi	r18, 0x01	; 1
 814:	80 40       	sbci	r24, 0x00	; 0
 816:	90 40       	sbci	r25, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <decodeTick+0x1c8>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <decodeTick+0x1d2>
 81c:	00 00       	nop
 81e:	53 c0       	rjmp	.+166    	; 0x8c6 <decodeTick+0x27c>
 820:	da 01       	movw	r26, r20
 822:	c9 01       	movw	r24, r18
 824:	8c 55       	subi	r24, 0x5C	; 92
 826:	91 09       	sbc	r25, r1
 828:	a1 09       	sbc	r26, r1
 82a:	b1 09       	sbc	r27, r1
 82c:	86 97       	sbiw	r24, 0x26	; 38
 82e:	a1 05       	cpc	r26, r1
 830:	b1 05       	cpc	r27, r1
 832:	08 f0       	brcs	.+2      	; 0x836 <decodeTick+0x1ec>
 834:	48 c0       	rjmp	.+144    	; 0x8c6 <decodeTick+0x27c>
 836:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <on>
 83a:	88 23       	and	r24, r24
 83c:	09 f4       	brne	.+2      	; 0x840 <decodeTick+0x1f6>
 83e:	43 c0       	rjmp	.+134    	; 0x8c6 <decodeTick+0x27c>
 840:	60 e2       	ldi	r22, 0x20	; 32
 842:	75 e0       	ldi	r23, 0x05	; 5
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	7f dc       	rcall	.-1794   	; 0x146 <LCD_DisplayString>
 848:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <__data_end>
 84c:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <currChannel>
 850:	88 23       	and	r24, r24
 852:	29 f0       	breq	.+10     	; 0x85e <decodeTick+0x214>
 854:	81 50       	subi	r24, 0x01	; 1
 856:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <currChannel>
 85a:	81 11       	cpse	r24, r1
 85c:	0e c0       	rjmp	.+28     	; 0x87a <decodeTick+0x230>
 85e:	8c ef       	ldi	r24, 0xFC	; 252
 860:	92 e0       	ldi	r25, 0x02	; 2
 862:	1a de       	rcall	.-972    	; 0x498 <ReplaceBitmap>
 864:	e7 dd       	rcall	.-1074   	; 0x434 <LCD_Update>
 866:	2f e1       	ldi	r18, 0x1F	; 31
 868:	81 ea       	ldi	r24, 0xA1	; 161
 86a:	97 e0       	ldi	r25, 0x07	; 7
 86c:	21 50       	subi	r18, 0x01	; 1
 86e:	80 40       	sbci	r24, 0x00	; 0
 870:	90 40       	sbci	r25, 0x00	; 0
 872:	e1 f7       	brne	.-8      	; 0x86c <decodeTick+0x222>
 874:	00 c0       	rjmp	.+0      	; 0x876 <decodeTick+0x22c>
 876:	00 00       	nop
 878:	26 c0       	rjmp	.+76     	; 0x8c6 <decodeTick+0x27c>
 87a:	81 30       	cpi	r24, 0x01	; 1
 87c:	71 f4       	brne	.+28     	; 0x89a <decodeTick+0x250>
 87e:	84 e0       	ldi	r24, 0x04	; 4
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0a de       	rcall	.-1004   	; 0x498 <ReplaceBitmap>
 884:	d7 dd       	rcall	.-1106   	; 0x434 <LCD_Update>
 886:	2f e1       	ldi	r18, 0x1F	; 31
 888:	81 ea       	ldi	r24, 0xA1	; 161
 88a:	97 e0       	ldi	r25, 0x07	; 7
 88c:	21 50       	subi	r18, 0x01	; 1
 88e:	80 40       	sbci	r24, 0x00	; 0
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <decodeTick+0x242>
 894:	00 c0       	rjmp	.+0      	; 0x896 <decodeTick+0x24c>
 896:	00 00       	nop
 898:	16 c0       	rjmp	.+44     	; 0x8c6 <decodeTick+0x27c>
 89a:	a7 dd       	rcall	.-1202   	; 0x3ea <LCD_clear>
 89c:	e1 2c       	mov	r14, r1
 89e:	01 e0       	ldi	r16, 0x01	; 1
 8a0:	28 e2       	ldi	r18, 0x28	; 40
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	4f e4       	ldi	r20, 0x4F	; 79
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	65 e0       	ldi	r22, 0x05	; 5
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	85 e0       	ldi	r24, 0x05	; 5
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	27 de       	rcall	.-946    	; 0x500 <DrawRectangle>
 8b2:	c0 dd       	rcall	.-1152   	; 0x434 <LCD_Update>
 8b4:	2f e1       	ldi	r18, 0x1F	; 31
 8b6:	81 ea       	ldi	r24, 0xA1	; 161
 8b8:	97 e0       	ldi	r25, 0x07	; 7
 8ba:	21 50       	subi	r18, 0x01	; 1
 8bc:	80 40       	sbci	r24, 0x00	; 0
 8be:	90 40       	sbci	r25, 0x00	; 0
 8c0:	e1 f7       	brne	.-8      	; 0x8ba <decodeTick+0x270>
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <decodeTick+0x27a>
 8c4:	00 00       	nop
 8c6:	0f 91       	pop	r16
 8c8:	ef 90       	pop	r14
 8ca:	08 95       	ret

000008cc <main>:
 8cc:	11 b8       	out	0x01, r1	; 1
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	82 b9       	out	0x02, r24	; 2
 8d2:	14 b8       	out	0x04, r1	; 4
 8d4:	85 b9       	out	0x05, r24	; 5
 8d6:	87 b9       	out	0x07, r24	; 7
 8d8:	18 b8       	out	0x08, r1	; 8
 8da:	8a b9       	out	0x0a, r24	; 10
 8dc:	1b b8       	out	0x0b, r1	; 11
 8de:	80 e3       	ldi	r24, 0x30	; 48
 8e0:	bc dc       	rcall	.-1672   	; 0x25a <ADC_init>
 8e2:	19 dc       	rcall	.-1998   	; 0x116 <LCD_init>
 8e4:	0d dc       	rcall	.-2022   	; 0x100 <LCD_ClearScreen>
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	0e dc       	rcall	.-2020   	; 0x106 <LCD_Cursor>
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	a2 dc       	rcall	.-1724   	; 0x238 <TimerSet>
 8f4:	41 dc       	rcall	.-1918   	; 0x178 <TimerOn>
 8f6:	45 dd       	rcall	.-1398   	; 0x382 <LCD_5110_init>
 8f8:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8fc:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 900:	47 98       	cbi	0x08, 7	; 8
 902:	d0 e0       	ldi	r29, 0x00	; 0
 904:	ff 24       	eor	r15, r15
 906:	f3 94       	inc	r15
 908:	d1 11       	cpse	r29, r1
 90a:	15 c0       	rjmp	.+42     	; 0x936 <main+0x6a>
 90c:	80 e4       	ldi	r24, 0x40	; 64
 90e:	ef db       	rcall	.-2082   	; 0xee <LCD_WriteCommand>
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	10 dc       	rcall	.-2016   	; 0x134 <LCD_WriteData>
 914:	8a e0       	ldi	r24, 0x0A	; 10
 916:	0e dc       	rcall	.-2020   	; 0x134 <LCD_WriteData>
 918:	8a e0       	ldi	r24, 0x0A	; 10
 91a:	0c dc       	rcall	.-2024   	; 0x134 <LCD_WriteData>
 91c:	8a e0       	ldi	r24, 0x0A	; 10
 91e:	0a dc       	rcall	.-2028   	; 0x134 <LCD_WriteData>
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	08 dc       	rcall	.-2032   	; 0x134 <LCD_WriteData>
 924:	81 e1       	ldi	r24, 0x11	; 17
 926:	06 dc       	rcall	.-2036   	; 0x134 <LCD_WriteData>
 928:	8e e0       	ldi	r24, 0x0E	; 14
 92a:	04 dc       	rcall	.-2040   	; 0x134 <LCD_WriteData>
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	02 dc       	rcall	.-2044   	; 0x134 <LCD_WriteData>
 930:	80 e8       	ldi	r24, 0x80	; 128
 932:	dd db       	rcall	.-2118   	; 0xee <LCD_WriteCommand>
 934:	df 2d       	mov	r29, r15
 936:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <on>
 93a:	81 11       	cpse	r24, r1
 93c:	8e dd       	rcall	.-1252   	; 0x45a <joyStick_Tick>
 93e:	85 de       	rcall	.-758    	; 0x64a <decodeTick>
 940:	c4 e6       	ldi	r28, 0x64	; 100
 942:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <TimerFlag>
 946:	88 23       	and	r24, r24
 948:	e1 f3       	breq	.-8      	; 0x942 <main+0x76>
 94a:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <TimerFlag>
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	c8 01       	movw	r24, r16
 954:	88 dc       	rcall	.-1776   	; 0x266 <irLoop>
 956:	c1 50       	subi	r28, 0x01	; 1
 958:	a1 f7       	brne	.-24     	; 0x942 <main+0x76>
 95a:	d6 cf       	rjmp	.-84     	; 0x908 <main+0x3c>

0000095c <__udivmodsi4>:
 95c:	a1 e2       	ldi	r26, 0x21	; 33
 95e:	1a 2e       	mov	r1, r26
 960:	aa 1b       	sub	r26, r26
 962:	bb 1b       	sub	r27, r27
 964:	fd 01       	movw	r30, r26
 966:	0d c0       	rjmp	.+26     	; 0x982 <__udivmodsi4_ep>

00000968 <__udivmodsi4_loop>:
 968:	aa 1f       	adc	r26, r26
 96a:	bb 1f       	adc	r27, r27
 96c:	ee 1f       	adc	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	a2 17       	cp	r26, r18
 972:	b3 07       	cpc	r27, r19
 974:	e4 07       	cpc	r30, r20
 976:	f5 07       	cpc	r31, r21
 978:	20 f0       	brcs	.+8      	; 0x982 <__udivmodsi4_ep>
 97a:	a2 1b       	sub	r26, r18
 97c:	b3 0b       	sbc	r27, r19
 97e:	e4 0b       	sbc	r30, r20
 980:	f5 0b       	sbc	r31, r21

00000982 <__udivmodsi4_ep>:
 982:	66 1f       	adc	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	1a 94       	dec	r1
 98c:	69 f7       	brne	.-38     	; 0x968 <__udivmodsi4_loop>
 98e:	60 95       	com	r22
 990:	70 95       	com	r23
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	9b 01       	movw	r18, r22
 998:	ac 01       	movw	r20, r24
 99a:	bd 01       	movw	r22, r26
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
