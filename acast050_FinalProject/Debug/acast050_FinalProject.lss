
acast050_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  0080017a  0080017a  00000550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f88  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000970  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000648  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000604  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fc  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c5 c0       	rjmp	.+394    	; 0x1c0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 37       	cpi	r26, 0x7A	; 122
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	aa e7       	ldi	r26, 0x7A	; 122
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 36       	cpi	r26, 0x6A	; 106
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	72 d1       	rcall	.+740    	; 0x3a8 <main>
  c4:	bc c1       	rjmp	.+888    	; 0x43e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
		case maintainD:
			break;
		case maintainU:
			break;
		default:
			LCD_DisplayString(1, strings[0]);
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	41 98       	cbi	0x08, 1	; 8
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	40 9a       	sbi	0x08, 0	; 8
  f4:	00 00       	nop
  f6:	40 98       	cbi	0x08, 0	; 8
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	8b b9       	out	0x0b, r24	; 11
 138:	40 9a       	sbi	0x08, 0	; 8
 13a:	00 00       	nop
 13c:	40 98       	cbi	0x08, 0	; 8
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <TimerOn>:
 178:	8b e0       	ldi	r24, 0x0B	; 11
 17a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17e:	8d e7       	ldi	r24, 0x7D	; 125
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 190:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 194:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 1ac:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 1b0:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <__data_end+0x2>
 1b4:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <__data_end+0x3>
 1b8:	8f b7       	in	r24, 0x3f	; 63
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	8f bf       	out	0x3f, r24	; 63
 1be:	08 95       	ret

000001c0 <__vector_13>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 1d6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
 1da:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <__data_end+0x2>
 1de:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <__data_end+0x3>
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 1ec:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 1f0:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <__data_end+0x2>
 1f4:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <__data_end+0x3>
 1f8:	89 2b       	or	r24, r25
 1fa:	8a 2b       	or	r24, r26
 1fc:	8b 2b       	or	r24, r27
 1fe:	99 f4       	brne	.+38     	; 0x226 <__vector_13+0x66>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <TimerFlag>
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 216:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 21a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 21e:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <__data_end+0x2>
 222:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <__data_end+0x3>
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <TimerSet>:
 238:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 23c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 248:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <__data_end>
 24c:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <__data_end+0x1>
 250:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end+0x2>
 254:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x3>
 258:	08 95       	ret

0000025a <ADC_init>:
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 6e       	ori	r24, 0xE0	; 224
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <irLoop>:
enum IR_STATES{IR_init, countHigh, countLow, update};
void irLoop(unsigned short x, unsigned short y){
	unsigned short highPulse = 0;
	unsigned short lowPulse = 0;
	//static unsigned char currentPulse = 0;
	if(x != ADC){ //if a change from the orriginal ADC signal is detected
 266:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 26a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 26e:	28 17       	cp	r18, r24
 270:	39 07       	cpc	r19, r25
 272:	81 f1       	breq	.+96     	; 0x2d4 <irLoop+0x6e>
		y = ADC; //set y to the current ADC signal (hopefully still different from x)
 274:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 278:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		while(x != y){ // while that signal still differs (it is high)
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	81 f1       	breq	.+96     	; 0x2e2 <irLoop+0x7c>
			y = ADC;
 282:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 286:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	e8 e7       	ldi	r30, 0x78	; 120
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <irLoop+0x3e>
 294:	40 81       	ld	r20, Z
 296:	51 81       	ldd	r21, Z+1	; 0x01
			highPulse++; // count how many iterations it is high for
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
			if(highPulse >= MAX_VAL){
 29c:	28 3e       	cpi	r18, 0xE8	; 232
 29e:	6d ef       	ldi	r22, 0xFD	; 253
 2a0:	36 07       	cpc	r19, r22
 2a2:	a1 f1       	breq	.+104    	; 0x30c <irLoop+0xa6>
	unsigned short highPulse = 0;
	unsigned short lowPulse = 0;
	//static unsigned char currentPulse = 0;
	if(x != ADC){ //if a change from the orriginal ADC signal is detected
		y = ADC; //set y to the current ADC signal (hopefully still different from x)
		while(x != y){ // while that signal still differs (it is high)
 2a4:	84 17       	cp	r24, r20
 2a6:	95 07       	cpc	r25, r21
 2a8:	a9 f7       	brne	.-22     	; 0x294 <irLoop+0x2e>
 2aa:	1d c0       	rjmp	.+58     	; 0x2e6 <irLoop+0x80>
				return 0;
			}
		}
		pulses[currentPulse][0] = highPulse;
		while(x == y){ // the signal has gone back to being low (or how it was orriginally before button press)
			lowPulse++; // count how many iteratinos it is low for
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
			y = ADC;
 2b0:	40 81       	ld	r20, Z
 2b2:	51 81       	ldd	r21, Z+1	; 0x01
			if(lowPulse >= MAX_VAL){
 2b4:	28 3e       	cpi	r18, 0xE8	; 232
 2b6:	bd ef       	ldi	r27, 0xFD	; 253
 2b8:	3b 07       	cpc	r19, r27
 2ba:	41 f1       	breq	.+80     	; 0x30c <irLoop+0xa6>
			if(highPulse >= MAX_VAL){
				return 0;
			}
		}
		pulses[currentPulse][0] = highPulse;
		while(x == y){ // the signal has gone back to being low (or how it was orriginally before button press)
 2bc:	84 17       	cp	r24, r20
 2be:	95 07       	cpc	r25, r21
 2c0:	a9 f3       	breq	.-22     	; 0x2ac <irLoop+0x46>
			if(lowPulse >= MAX_VAL){
				return 0;
			}
			//PORTB = lowPulse & 0xFF;
		}
		pulses[currentPulse][1] = lowPulse;
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	fb 01       	movw	r30, r22
 2c8:	ea 56       	subi	r30, 0x6A	; 106
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	21 83       	std	Z+1, r18	; 0x01
		currentPulse++;
 2ce:	af 5f       	subi	r26, 0xFF	; 255
 2d0:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <currentPulse>
		//LCD_DisplayString(1, pulses[currentPulse]);
	}
	if(currentPulse >= 100){
 2d4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <currentPulse>
 2d8:	84 36       	cpi	r24, 0x64	; 100
 2da:	c0 f0       	brcs	.+48     	; 0x30c <irLoop+0xa6>
		currentPulse = 0;
 2dc:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <currentPulse>
 2e0:	08 95       	ret
	}
}

enum IR_STATES{IR_init, countHigh, countLow, update};
void irLoop(unsigned short x, unsigned short y){
	unsigned short highPulse = 0;
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
			highPulse++; // count how many iterations it is high for
			if(highPulse >= MAX_VAL){
				return 0;
			}
		}
		pulses[currentPulse][0] = highPulse;
 2e6:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <currentPulse>
 2ea:	6a 2f       	mov	r22, r26
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	fb 01       	movw	r30, r22
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	ea 56       	subi	r30, 0x6A	; 106
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	20 83       	st	Z, r18
		while(x == y){ // the signal has gone back to being low (or how it was orriginally before button press)
			lowPulse++; // count how many iteratinos it is low for
			y = ADC;
 2fa:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2fe:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	e8 e7       	ldi	r30, 0x78	; 120
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	d8 cf       	rjmp	.-80     	; 0x2bc <irLoop+0x56>
 30c:	08 95       	ret

0000030e <decodeTick>:
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
	for(i = 0; i < currentPulse; i++){
 30e:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <currentPulse>
 312:	22 23       	and	r18, r18
 314:	b1 f0       	breq	.+44     	; 0x342 <decodeTick+0x34>
 316:	e6 e9       	ldi	r30, 0x96	; 150
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	4f ef       	ldi	r20, 0xFF	; 255
 31c:	42 0f       	add	r20, r18
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	48 56       	subi	r20, 0x68	; 104
 326:	5e 4f       	sbci	r21, 0xFE	; 254
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	cb 01       	movw	r24, r22
		averageHigh += pulses[i][0];
 32e:	30 81       	ld	r19, Z
 330:	63 0f       	add	r22, r19
 332:	71 1d       	adc	r23, r1
 334:	81 1d       	adc	r24, r1
 336:	91 1d       	adc	r25, r1
 338:	32 96       	adiw	r30, 0x02	; 2
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
	for(i = 0; i < currentPulse; i++){
 33a:	e4 17       	cp	r30, r20
 33c:	f5 07       	cpc	r31, r21
 33e:	b9 f7       	brne	.-18     	; 0x32e <decodeTick+0x20>
 340:	03 c0       	rjmp	.+6      	; 0x348 <decodeTick+0x3a>
	for(i = 17; i <33; i++){
		LCD_Cursor(i);
		LCD_WriteData(pulses[i][1] + ' ');
	} */

	unsigned long averageHigh = 0;
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	cb 01       	movw	r24, r22
	for(i = 0; i < currentPulse; i++){
		averageHigh += pulses[i][0];
	}
	averageHigh = averageHigh / currentPulse;
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	55 d0       	rcall	.+170    	; 0x3fa <__udivmodsi4>
	//LCD_Cursor(1);
	//LCD_WriteData(averageHigh + ' ');

	if(averageHigh > 45 && averageHigh < 57){
 350:	da 01       	movw	r26, r20
 352:	c9 01       	movw	r24, r18
 354:	8e 97       	sbiw	r24, 0x2e	; 46
 356:	a1 09       	sbc	r26, r1
 358:	b1 09       	sbc	r27, r1
 35a:	0b 97       	sbiw	r24, 0x0b	; 11
 35c:	a1 05       	cpc	r26, r1
 35e:	b1 05       	cpc	r27, r1
 360:	28 f4       	brcc	.+10     	; 0x36c <decodeTick+0x5e>
		LCD_DisplayString(1, "Power!");
 362:	64 e0       	ldi	r22, 0x04	; 4
 364:	71 e0       	ldi	r23, 0x01	; 1
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	ee ce       	rjmp	.-548    	; 0x146 <LCD_DisplayString>
 36a:	08 95       	ret
	}
	else if(averageHigh > 77 && averageHigh < 84){
 36c:	da 01       	movw	r26, r20
 36e:	c9 01       	movw	r24, r18
 370:	8e 54       	subi	r24, 0x4E	; 78
 372:	91 09       	sbc	r25, r1
 374:	a1 09       	sbc	r26, r1
 376:	b1 09       	sbc	r27, r1
 378:	06 97       	sbiw	r24, 0x06	; 6
 37a:	a1 05       	cpc	r26, r1
 37c:	b1 05       	cpc	r27, r1
 37e:	28 f4       	brcc	.+10     	; 0x38a <decodeTick+0x7c>
		LCD_DisplayString(1, "Pointed Towards \"Channel UP\"");
 380:	6b e0       	ldi	r22, 0x0B	; 11
 382:	71 e0       	ldi	r23, 0x01	; 1
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	df ce       	rjmp	.-578    	; 0x146 <LCD_DisplayString>
 388:	08 95       	ret
	}
	else if(averageHigh > 91 && averageHigh < 130){
 38a:	da 01       	movw	r26, r20
 38c:	c9 01       	movw	r24, r18
 38e:	8c 55       	subi	r24, 0x5C	; 92
 390:	91 09       	sbc	r25, r1
 392:	a1 09       	sbc	r26, r1
 394:	b1 09       	sbc	r27, r1
 396:	86 97       	sbiw	r24, 0x26	; 38
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
		LCD_DisplayString(1, "Pointed Away    \"Channel DOWN\"");
 39c:	20 f4       	brcc	.+8      	; 0x3a6 <decodeTick+0x98>
 39e:	68 e2       	ldi	r22, 0x28	; 40
 3a0:	71 e0       	ldi	r23, 0x01	; 1
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	d0 ce       	rjmp	.-608    	; 0x146 <LCD_DisplayString>
 3a6:	08 95       	ret

000003a8 <main>:
	LCD_Cursor(17);
	LCD_WriteData(averageLow + ' '); */
}

int main(void){
	DDRA = 0x00; PORTA = 0xFF; //Input
 3a8:	11 b8       	out	0x01, r1	; 1
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //Ouptut
 3ae:	84 b9       	out	0x04, r24	; 4
 3b0:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x0F; PORTC = 0xF0; 
 3b2:	9f e0       	ldi	r25, 0x0F	; 15
 3b4:	97 b9       	out	0x07, r25	; 7
 3b6:	90 ef       	ldi	r25, 0xF0	; 240
 3b8:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 3ba:	8a b9       	out	0x0a, r24	; 10
	ADC_init();
 3bc:	1b b8       	out	0x0b, r1	; 11
 3be:	4d df       	rcall	.-358    	; 0x25a <ADC_init>
 3c0:	aa de       	rcall	.-684    	; 0x116 <LCD_init>
 3c2:	9e de       	rcall	.-708    	; 0x100 <LCD_ClearScreen>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	9f de       	rcall	.-706    	; 0x106 <LCD_Cursor>
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	33 df       	rcall	.-410    	; 0x238 <TimerSet>
 3d2:	d2 de       	rcall	.-604    	; 0x178 <TimerOn>
 3d4:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3d8:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3dc:	98 df       	rcall	.-208    	; 0x30e <decodeTick>
 3de:	c4 e6       	ldi	r28, 0x64	; 100
 3e0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <TimerFlag>
 3e4:	88 23       	and	r24, r24
 3e6:	e1 f3       	breq	.-8      	; 0x3e0 <main+0x38>
 3e8:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <TimerFlag>
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	c8 01       	movw	r24, r16
 3f2:	39 df       	rcall	.-398    	; 0x266 <irLoop>
 3f4:	c1 50       	subi	r28, 0x01	; 1
 3f6:	a1 f7       	brne	.-24     	; 0x3e0 <main+0x38>
 3f8:	f1 cf       	rjmp	.-30     	; 0x3dc <main+0x34>

000003fa <__udivmodsi4>:
 3fa:	a1 e2       	ldi	r26, 0x21	; 33
 3fc:	1a 2e       	mov	r1, r26
 3fe:	aa 1b       	sub	r26, r26
 400:	bb 1b       	sub	r27, r27
 402:	fd 01       	movw	r30, r26
 404:	0d c0       	rjmp	.+26     	; 0x420 <__udivmodsi4_ep>

00000406 <__udivmodsi4_loop>:
 406:	aa 1f       	adc	r26, r26
 408:	bb 1f       	adc	r27, r27
 40a:	ee 1f       	adc	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	a2 17       	cp	r26, r18
 410:	b3 07       	cpc	r27, r19
 412:	e4 07       	cpc	r30, r20
 414:	f5 07       	cpc	r31, r21
 416:	20 f0       	brcs	.+8      	; 0x420 <__udivmodsi4_ep>
 418:	a2 1b       	sub	r26, r18
 41a:	b3 0b       	sbc	r27, r19
 41c:	e4 0b       	sbc	r30, r20
 41e:	f5 0b       	sbc	r31, r21

00000420 <__udivmodsi4_ep>:
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a 94       	dec	r1
 42a:	69 f7       	brne	.-38     	; 0x406 <__udivmodsi4_loop>
 42c:	60 95       	com	r22
 42e:	70 95       	com	r23
 430:	80 95       	com	r24
 432:	90 95       	com	r25
 434:	9b 01       	movw	r18, r22
 436:	ac 01       	movw	r20, r24
 438:	bd 01       	movw	r22, r26
 43a:	cf 01       	movw	r24, r30
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
